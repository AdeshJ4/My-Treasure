Linux is open source software. for this reason many individuals and communities have created their own version of linux called linux distributions.
each of these distribution is made to fit special needs like running servers, desktop computers mobile phones and so on.

A Linux distribution, or "distro," is an operating system built on the Linux kernel, combined with a package 
of software and libraries that help it run. 

1000 of distro available now.

linux is case sensitive, so spell the name of files and folders correctly.

famous one: 

1. Ubuntu   we are going to use
2. Debian
3. Alpine
4. Fedora
5. CentOS


most of these distros support same commands. 



lets see how we can run Ubuntu 
go to hub and search for "Ubuntu" (https://hub.docker.com/_/ubuntu) 
instead of pull command we can run directly "docker run ubuntu"
if we have this image locally docker is going to start a container with this image otherwise its going to pull this image from hub and 
then start the container.

PS C:\Users\Anurag.LAPTOP-1QDKUF7J\Downloads\ok\m-t> docker run ubuntu 
Unable to find image 'ubuntu:latest' locally
latest: Pulling from library/ubuntu
de44b265507a: Download complete
Digest: sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab
Status: Downloaded newer image for ubuntu:latest
PS C:\Users\Anurag.LAPTOP-1QDKUF7J\Downloads\ok\m-t> 

since we didn't interact with container, container stops.


if you run "docker ps", then we can see list of running containers.
iii]  docker ps:                      List running containers

PS C:\Users\Anurag.LAPTOP-1QDKUF7J\Downloads\ok\m-t> docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
PS C:\Users\Anurag.LAPTOP-1QDKUF7J\Downloads\ok\m-t> 

but if you run "docker ps -a"

PS C:\Users\Anurag.LAPTOP-1QDKUF7J\Downloads\ok\m-t> docker ps -a
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS                      PORTS     NAMES
9eae4ef58667   ubuntu         "/bin/bash"              2 minutes ago    Exited (0) 2 minutes ago              wizardly_chatelet
7239341e58d2   hello-docker   "docker-entrypoint.s…"   29 minutes ago   Exited (0) 29 minutes ago             compassionate_noether
8ab543b54f0b   hello-docker   "docker-entrypoint.s…"   6 hours ago      Exited (0) 6 hours ago                stoic_benz
4a439de21cd7   hello-world    "/hello"                 28 hours ago     Exited (0) 28 hours ago               nervous_mayer
PS C:\Users\Anurag.LAPTOP-1QDKUF7J\Downloads\ok\m-t> 




to start a container and interact with it we have to type > docker run -it ubuntu
"-it" stands for interactive.


what we have here is called shell.
PS C:\Users\Anurag.LAPTOP-1QDKUF7J\Downloads\ok\m-t> docker run -it ubuntu
root@4ca0c14ac0ef:/# 

a shell is a program that takes a command  and passes them to OS to execute.

the first part "root" represent the currently log in user. 
root user have highest privileges so he is like god. (/) represent root directory.
(#) only if you are root user, for normal user we have ($).





PS E:\z Project\hello-docker> docker run -it ubuntu
root@56ad8dab1938:/# echo bonjour
bonjour
root@56ad8dab1938:/#
root@56ad8dab1938:/# whoami
root
root@56ad8dab1938:/# echo $0
/bin/bash
root@56ad8dab1938:/# history
    1  echo bonjour
    2  whoami
    3  echo $0
    4  history
root@56ad8dab1938:/# !2
whoami
root
root@56ad8dab1938:/# history   (history of commands)
    1  echo bonjour
    2  echo adesh
    3  whoami
    4  cls
    5  history
root@56ad8dab1938:/# !2   (you can rerun any command by this)
echo adesh
adesh



Managing packages: 
These days most of OS and development platform comes with package manager, you probably works with npm, yarn, pip
 
in ubuntu we have : apt: advance package tool
type > apt 

lets download package called "nano", its a basic text editor for linux.

if you type > nano then you will get :
root@4ca0c14ac0ef:/# nano
bash: nano: command not found   (because we don't have)

lets install using apt.
root@4ca0c14ac0ef:/# apt install nano
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
E: Unable to locate package nano
root@4ca0c14ac0ef:/# 


we get error saying "E: Unable to locate package nano",  here in linux we have "package database" and this database might contain 100 of 
packages but not all these packages are installed. 

to get list all packages: 
root@56ad8dab1938:/# apt list

when we type "apt install nano" then it search the in package database, when he didn't find in their then we get error.

so run : 
root@4ca0c14ac0ef:/# apt update (to update database)


when you install any package it will give error so run this command first:
root@56ad8dab1938:/# apt update


then install package called nano(text editor):
root@56ad8dab1938:/# apt install nano


uninstall package called nano(text editor): 
root@56ad8dab1938:/# apt remove nano 



Linux file System: 
==================

In windows we have "C" drive on top of the hierarchy and below that we have Program files, windows, In linux we have root directory on top of the hierarchy.
below that we have bin, boot, dev, etc, home, root, lib, var, proc.

In linux everything is file, including devices, directories, network sockets and so on.




Navigating to File System:
=========================

pwd stands for "print working directory". When you type pwd in the terminal, it outputs the full path of the current directory you’re working in
root@f5105e6b3e6f:/# pwd    
/
root@f5105e6b3e6f:/# 


change directory: 
cd



Home Directory : 
----------------
home directory where each user have home directory.
but the root user has "special home" directory called "root". 
ex:
root@3ad147fc14ec:/# ls
bin   dev  home  lib64  mnt  proc  run   srv  tmp  var
boot  etc  lib   media  opt  root  sbin  sys  usr
root@3ad147fc14ec:/# cd root/
root@3ad147fc14ec:~# 

there is short cut for this : 
root@3ad147fc14ec:/# cd ~
root@3ad147fc14ec:~#  



list all files and folders: 
root@f5105e6b3e6f:/# ls
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
root@f5105e6b3e6f:/# 


mkdir -> create directory
root@f5105e6b3e6f:~# mkdir test


mv -> move or rename
root@f5105e6b3e6f:~# ls
test
root@f5105e6b3e6f:~# mv test dockerTest
root@f5105e6b3e6f:~# ls
dockerTest

mv -> move file from one directory to another
root@f5105e6b3e6f:/adesh/f1# mv index.js ../f2/
we are moving index.js from f1 folder to f2 folder.


touch -> create new file or files in one go: 
root@f5105e6b3e6f:~/dockerTest# touch hello.txt
root@f5105e6b3e6f:~/dockerTest# touch f1.txt f2.txt f3.txt



rm -> remove/delete file
root@f5105e6b3e6f:~/dockerTest# rm f1.txt

rm -> remove all files start from specific word. like f
root@f5105e6b3e6f:~/dockerTest# rm f4.txt     -> it will delete all files starts with f like f1.txt, f2.txt


rm -> remove directory and its content: 
root@f5105e6b3e6f:~# rm -r dockerTest/




view file : 
root@f5105e6b3e6f:/adesh# cat app.txt 
Hello Docker
I am learning docker for up sko=illing my sills
root@f5105e6b3e6f:/adesh# 




Finding Files and directories: 

-> we have "find" command for finding files and directories. if we execute this command without any arguments 
then you can see all the files and directories in the current directory





root@cc2538cb151c:~# cat /etc/passwd | grep john
john:x:1001:1001::/home/john:/bin/sh
root@cc2538cb151c:~# grep john /etc/passwd
john:x:1001:1001::/home/john:/bin/sh


Managing Users: 
==============


-> How to create a new user and log in as a that user.
commands L 

1. useradd -> adding new user
2. usermod -> modifying user
3. userdel -> deleting user
4. adduser -> more interactive command to add user (new command)


type > exit 
ex: 

root@cc2538cb151c:~# useradd -m john
C:\Users\Anurag\m-t> docker exec -it -u john cc2538cb151c bash   (log in as a john)
userdel john 


passwords are stored in encrypted format:
root@cc2538cb151c:~# cat /etc/shadow
root:*:20046:0:99999:7:::
daemon:*:20046:0:99999:7:::
bin:*:20046:0:99999:7:::
sys:*:20046:0:99999:7:::
sync:*:20046:0:99999:7:::
games:*:20046:0:99999:7:::
man:*:20046:0:99999:7:::
lp:*:20046:0:99999:7:::
mail:*:20046:0:99999:7:::
news:*:20046:0:99999:7:::
uucp:*:20046:0:99999:7:::
proxy:*:20046:0:99999:7:::
www-data:*:20046:0:99999:7:::
backup:*:20046:0:99999:7:::
list:*:20046:0:99999:7:::
irc:*:20046:0:99999:7:::
_apt:*:20046:0:99999:7:::
nobody:*:20046:0:99999:7:::
ubuntu:!:20046:0:99999:7:::
john:!:20088:0:99999:7:::
root@cc2538cb151c:~#




Quite ofter when using docker for deploying our application we don't want to use "adduser" command because 
we don't want to interact with this command.  



Managing Groups: 

1. groupadd -> 
2. groupmod -> 
3. groupdel -> 

we use groups so that all users in the same group have the same kind of permissions.

ex: 

root@cc2538cb151c:~# groupadd merndevelopers


to see all groups : 

root@cc2538cb151c:~# cat /etc/group 


lets add john to "merndevelopers" group: 


every "linux user" has "one primary" group and 0 or more "supplementary groups".

why these groups are separated:
lets say john is part of 5 groups and now he wants to create a new file, every file owned by one user and 
one group. if john is part of 5 groups which group we should use for owning that new file.
thats why we need primary group.
"primary group" is automatically created when we create a "new user", its the group with same name as the user.



set supplementary group for "john":

root@cc2538cb151c:~# usermod -aG merndevelopers john 

to check its added or not: 
root@cc2538cb151c:~# groups john
john : john merndevelopers   (john is part of two groups 1.john 2.merndevelopers);

Now add john to group "artist"

step 1 : create group: root@cc2538cb151c:~# groupadd artist
step 2 : check group is created or not(check last entry) > root@cc2538cb151c:~# cat /etc/group
step 3 : add "john" to "artist" group: root@cc2538cb151c:~# usermod -aG artist john 
step 4 : check "john" added to that group or not > 



