Using `$regex` in MongoDB can be costly, especially for large datasets. Here‚Äôs why and how to optimize it:

Regex queries can perform well on small to medium-sized collections (e.g., up to 10,000 documents).
For larger collections (e.g., millions of documents), regex queries can become slow and resource-intensive.

When you use prefix search with a regular expression ($regex: "^searchTerm"), MongoDB can use a normal index (B-tree index),not a text index.



üö® Why is `$regex` Costly?
1. No Index Usage (for Prefix Searches)
   - If the search pattern is not anchored (`/^pattern/`), MongoDB cannot use indexes efficiently.
   - Example:       { name: { $regex: "adesh", $options: "i" } }
     - Problem: This **scans the entire collection**, making it slow for large datasets.
     - Reason: The regex can match anywhere in the string, preventing index optimization.

2. Full Collection Scan
   - If no index is used, MongoDB checks every document, leading to high CPU and memory usage.

3. Performance Degrades with Large Data
   - If you have millions of users, regex queries will become very slow.

---

 üöÄ How to Optimize Regex Searches?

1Ô∏è‚É£ Use Indexed Prefix Search
üîπ If you search for names that start with a value, MongoDB can use indexes.  
‚úî Efficient Query:  { name: { $regex: /^Adesh/i } }
- Why? The `^` anchor forces MongoDB to search from the **beginning** of the string.
- Index Usage: ‚úÖ Uses indexes efficiently


‚ùå Avoid this (No index usage):
{ name: { $regex: "Adesh", $options: "i" } }
- Why? This searches anywhere in the name, causing a full scan.



### **2Ô∏è‚É£ Use MongoDB's Full-Text Search (`$text`)**
If you need **case-insensitive, partial matching**, use **text indexes** instead of regex.

#### **‚úÖ Step 1: Create a Text Index**
```js
db.users.createIndex({ name: "text" });
db.users.createIndex({ name: "text", bio: "text" });
```
#### **‚úÖ Step 2: Query Using `$text`**
```js
User.find({ $text: { $search: "Adesh" } });
```
- **Advantages of `$text` Search:**
  - **Much faster** than regex.
  - **Uses indexes** instead of scanning the whole collection.
  - **Supports multiple fields** (e.g., name, description).
  - **Finds words even in the middle** of a string.

---

### **3Ô∏è‚É£ Use Autocomplete with MongoDB Atlas Search**
If you need **Google-like search**, use **MongoDB Atlas Full-Text Search** with the **Autocomplete feature**.






