1. $exists: 
4. $regex




1. $exists: 

The $exists operator in MongoDB is used to check whether a field exists in a document. It can be used with true or false:

$exists: true → Matches documents where the field exists.

$exists: false → Matches documents where the field does not exist.


1️⃣. Find documents where the director field exists:
sample data: 
[
  { "_id": 1, "title": "Inception", "director": "Christopher Nolan" },
  { "_id": 2, "title": "Titanic", "year": 1997 },
  { "_id": 3, "title": "Avatar", "year": 2009, "director": "James Cameron" }
]
output:
[
  { "_id": 1, "title": "Inception", "director": "Christopher Nolan" },
  { "_id": 3, "title": "Avatar", "year": 2009, "director": "James Cameron" }
]
Query>
db.movies.find({ director: { $exists: true } })


2️⃣. Add a new field category: "Sci-Fi" where director exists

db.movies.updateMany({ "director": { $exists: true } },  { $set: { "category": "Sci-Fi" } });


3️⃣ Delete documents where director does not exist

db.movies.deleteMany({ "director": { $exists: false } });





============================================================================================================================================================




4. $regex

-> it stands for 'regular expression'
-> it accepts pattern and according to that pattern it finds the documents.
-> ex. pattern for string like, str starts with, str ends with, str contain word like and s on..
-> it is not good for performance. instead use "text index".
-> Regular expression queries without an index can be resource-intensive and may not scale well as the 
dataset grows.

Input : 

db.users.insertMany([
  { name: "Alice Johnson", email: "alice@example.com", bio: "Loves hiking and photography" },
  { name: "Bob Smith", email: "bob@example.com", bio: "Enjoys coding and machine learning" },
  { name: "Charlie Brown", email: "charlie@example.com", bio: "Avid reader and coffee lover" },
  { name: "David White", email: "david@example.com", bio: "Passionate about music and sports" },
  { name: "Emma Wilson", email: "emma@example.com", bio: "Traveler and food enthusiast" },
  { name: "Franklin Dorsey", email: "frank@example.com", bio: "Tech entrepreneur and investor" },
  { name: "Grace Lee", email: "grace@example.com", bio: "Yoga instructor and meditation expert" },
  { name: "Hannah Carter", email: "hannah@example.com", bio: "Writes poetry and short stories" },
  { name: "Isaac Newton", email: "isaac@example.com", bio: "Physicist and mathematician" },
  { name: "Jack Ryan", email: "jack@example.com", bio: "Secret agent and world traveler" }
]);





🔹 1. Find Users Whose Name Starts with "Al" (^Al)
✅ Uses Index (if an index exists on name)
```
db.users.find({ name: { $regex: "^Al" } });
```
🔹 Matches: "Alex", "Alice", "Albert"
❌ Does NOT match: "Daniel Alson"


🔹 2. Find Users Whose Name Ends with "son" (son$)
❌ Does NOT Use Index (Full Collection Scan)
```
db.users.find({ name: { $regex: "son$" } });
```
🔹 Matches: "Jackson", "Emerson", "Johnson", "son"
❌ Does NOT match: "Sonny"



🔹 3. Find Users Whose Name Contains "tech" (tech)
❌ Does NOT Use Index (Slow for Large Data Sets)
```
db.users.find({ name: { $regex: "tech" } });
```
🔹 Matches: "TechGuru", "Biotech", "Fintech"
❌ Does NOT match: "Technology" (case-sensitive)



🔹 4. Case-Insensitive Search (/tech/i)
❌ Does NOT Use Index (Full Scan)
```
db.users.find({ name: { $regex: "tech", $options: "i" } });
```
🔹 Matches: "TechGuru", "TECHnology", "finTECH"




🔹 5. Match Users Whose Name Contains "john" OR "doe" (john|doe)
❌ Does NOT Use Index (Slow for Large Data Sets)
```
db.users.find({ name: { $regex: "john|doe", $options: "i" } });
```
🔹 Matches: "John Smith", "Doe Williams", "Johnny"
❌ Does NOT match: "Jonathan" (since "john" is part of another word)



Aggregation:
-----------

db.users.aggregate([
  {
    $match: {
      name: {
        $regex: "Adesh|Manoj",
        $options: "i"
      }
    }
  }
]);





🔹 Which One Uses Index?
✅ Only "^Al" Uses Index (Prefix search)
❌ All other regex searches cause a full collection scan



🔹 Best Practice: Use Full-Text Search Instead of $regex
If you need efficient word searches, use text indexes instead:
```
db.users.createIndex({ name: "text", bio: "text" });
db.users.find({ $text: { $search: "Tech" } });
```