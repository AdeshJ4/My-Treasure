1. $set
2. $unset
3. $rename
4. $inc
5. $min
6. $max
7. $mul




1. $set
-> $set field is used to 'update the value' of a field or to 'add a new field'.
-> If the field does not exist, $set will add a new field with the specified value.
ex: 
🔹 1. Update a User's Name
```
db.users.updateOne(
  { _id: ObjectId("650c0a9f8f1b6a1a5c9f9a7b") },  // Find user by ID
  { $set: { name: "John Doe" } } 
);
```

🔹 2. Add a New Field (status) if It Doesn’t Exist
```
db.users.updateOne(
  {_id: 1},
  { $set: { status: 'active' } }
)
```

🔹 3. Update Multiple Fields at Once
```
db.users.updateOne(
  { name: "Alice" },
  { $set: { age: 30, city: "New York", job: "Engineer" } }
) 
```

🔹 4. Update Multiple Documents (updateMany)
```
db.users.updateMany(
  { country: 'India' },
  { $set: { status: 'Active' } }
)
```

🔹 5. Use $set Inside findOneAndUpdate
```
db.users.findOneAndUpdate(
  { email: "alice@example.com" },
  { $set: { subscription: "Premium" } },
  { returnNewDocument: true }
);
```




sample data: 
[
  {
    "_id": 1,
    "specs": [
      { "feature": "RAM", "value": "16GB" },
      { "feature": "Storage", "value": "512GB SSD" }
    ],
    "manufacturer": { "name": "TechCorp","location": { "city": "San Francisco", "country": "USA" }}
  },
  {
    "_id": 2,
    "specs": [
      { "feature": "Camera", "value": "108MP" },
      { "feature": "Battery", "value": "5000mAh" }
    ],
    "manufacturer": { "name": "PhoneMakers", "location": { "city": "Seoul", "country": "South Korea" }}
  },
  {
    "_id": 3,
    "specs": [
      { "feature": "Graphics", "value": "4K UHD" },
      { "feature": "Storage", "value": "1TB SSD" }
    ],
    "manufacturer": { "name": "GameWorld", "location": { "city": "Tokyo", "country": "Japan" }
    }
  }
]


✅ update nested object value:
```
db.tb1.updateOne(
  {_id: 1},
  { $set: { 'manufacturer.name': 'Tech', 'manufacturer.location.city': 'Pune' } }
)
```

✅ add new value inside nested object:
```
db.tb1.updateOne(
  { _id: 1 },
  { $set: { 'manufacturer.founder': 'Adesh' } }
)
```



============================================================================================================================================================



2. $unset
-> The $unset operator 'deletes a particular field'.
-> If the field does not exist, then $unset does nothing.


1️⃣ Remove a Field from a Document
sample data: 
{
  age: 30,
}
```
db.users.updateOne(
  {_id: 1},
  {$unset: { age: "" }}
)
```

2️⃣ Remove a Nested Field
{
  contact: {
    email: "alice@example.com",
    phone: "123-456-7890"
  }
}
```
db.users.updateOne(
  {_id: 1},
  { $unset: { "contact.phone": "" } }
)
```

3️⃣ Remove Multiple Fields at Once
```
db.users.updateOne(
  {_id: 1},
  { $unset:{ name: "", 'contact.email': ""} }
)
```


============================================================================================================================================================

3. $rename
-> The $rename operator 'rename the name of a field '
-> If the field does not exist, $rename does nothing
-> the $rename operator can only rename top-level fields, not nested fields like 'location.city'.

1️⃣ Rename a Field
{
  name: "John Doe",   // make it "fullName"
}
```
db.users.updateOne(
  {_id: 1},
  {$rename: { name: 'fullName' }}
)
```

2️⃣ Rename Multiple Fields
{
  firstName: "Alice",
  lastName: "Smith"
}

```
db.users.updateOne(
  {_id: 1},
  { $rename: { firstName: 'fname', lastName: 'lname'} }
)
```


============================================================================================================================================================


4. $inc
-> The $inc operator "increments" or "decrements" a numeric field by a specified value.
-> If it +ve number then increase the no. if its -ve no then decrees no.
-> If the field does not exist, $inc creates the field and sets the field to the specified value.
-> Use of the $inc operator on a field with a null value will generate an error.

1️⃣ Increment a Number Field
```
db.users.updateOne(
  {_id: 1},
  {$inc: { age: 1 }}
)
```

2️⃣ Decrease score by 10:
```
db.users.updateOne(
  {_id: 1},
  {$inc: { score: -10 }}
)
```

3️⃣Increment Multiple Fields
```
db.users.updateOne(
  {_id: 1},
  {$inc: { age: 1, score: -2 } }
)
```

============================================================================================================================================================


5. $min
-> Only updates the field value if the 'specified value' is less than the 'existing field value'.
-> If the field does not exist, the $min operator sets the field to the specified value

{
  _id: 1,
  name: "John",
  age: 30
}
Try to Set age to 25:
db.users.updateOne(
  { _id: 1 },
  { $min: { age: 25 } }
);
{
  _id: 1,
  name: "John",
  age: 25
}

============================================================================================================================================================

 6. $max
-> Only updates the field value if the specified value is greater than the existing field value.
-> If the field does not exists, the $max operator sets the field to the specified value.

{
  _id: 1,
  name: "John",
  age: 30
}
Try to Set age to 35
db.users.updateOne(
  { _id: 1 },
  { $max: { age: 35 } }
);
{
  _id: 1,
  name: "John",
  age: 35
}


============================================================================================================================================================


7. $mul
-> Multiplies the value of the field by the specified amount.

Input: [ { "_id": 1, "quantity": 3 } ]
Output: [ { "_id": 1, "quantity": 6 }]
Query: db.tb1.updateOne({_id: 1}, {$mul: {quantity: 2}})  // 3 * 2 = 6



1. Add a Single Property:
-------------------------
Input: [{_id: 101, name: 'Adesh'}]
Output: [{name: 'Adesh', age: 22}]
Query: db.tb1.updateOne({Id: 101}, {$set: {age: 22}});



1. Change A Single Property : 
---------------------------
Input : {name: 'Max'}
Output: {name: 'Maxi'}
Query: db.tb1.updateOne({id: 101}, {$set: {name: 'Maxi'}})

2. add multiple properties: 
----------------------------
Input: [ { name: 'Adesh' } ]
Output: [ { name: 'Adesh' company: 'DXC', gender: 'M' } ]
Query: db.tb1.updateOne({name: 'Adesh'}, {$set: {company: 'DXC', gender: 'M'}})


2. Update Multiple Properties: 
------------------------------
Input: [ { name: 'Adesh' age: 21, height: 5 } ]
Output:[ { name: 'Adesh' age: 22, height: 6 } ]
Query: db.tb1.updateOne({name: 'Adesh'}, {$set: {age: 22, height: 6}})


3. Rename a field in all documents:
-----------------------------------
Input: [
   {
     "_id": 1,
     "alias": [ "The American Cincinnatus", "The American Fabius" ],
     "mobile": "555-555-5555",
     "nmae": { "first" : "george", "last" : "washington" }        <------------- Change this property
   },
   {
     "_id": 2,
     "alias": [ "My dearest friend" ],
     "mobile": "222-222-2222",
     "nmae": { "first" : "abigail", "last" : "adams" }
   }
]
output: Input: [
   {
     "_id": 1,
     "alias": [ "The American Cincinnatus", "The American Fabius" ],
     "mobile": "555-555-5555",
     "name": { "first" : "george", "last" : "washington" }
   },
   {
     "_id": 2,
     "alias": [ "My dearest friend" ],
     "mobile": "222-222-2222",
     "name": { "first" : "abigail", "last" : "adams" }
   }
]

Query: db.tb1.updateMany({}, {$rename: {"nmae": "name"}})
==========================================================================================================

Objects


3. Add Single Object : 
----------------------
Input: [{name: 'Adesh'}]
Output: [{name: 'Adesh',location: { village: 'Lohegaon', city: 'Pune' }}] 
Query: db.tb1.updateOne({name: "Adesh"}, {$set: {location: {street: 'lohegaon', city: 'Pune'}}})

3. Add Multiple Objects: 
------------------------
Input: [{name: 'Adesh'}] 
Output: [{name: 'Adesh', obj1: { bikeName: 'Yamaha' }, obj2: { carName: 'BMW' }}] 
Query: db.tb1.updateOne({ name: 'Adesh' }, { $set: { obj1:{carName: 'BMW'}, obj2:{bikeName: 'Yamaha'} }})

3. Update Single Object: 
----------------------------
Input: [{name: 'Adesh',location: { village: 'Lohegaon' }}] 
Output: [{name: 'Adesh',location: { village: 'Palgad' }}] 
Query: db.tb1.updateOne({name: 'Adesh'}, {$set: {'location.village': 'Palgad'}})



3. Update Multiple Objects: 
----------------------------
Input: [{name: 'Adesh',location: { village: 'Lohegaon', city: 'Pune' }}] 
Output: [{name: 'Adesh',location: { village: 'Palgad', city: 'Ratnagiri' }}] 
Query: db.tb1.updateOne({name: 'Adesh'}, {$set: {'location.village': 'Palgad', 'location.city': 'Ratnagiri'}})


3. Replace whole object with another Object: 
--------------------------------------------
Input: [{name: 'Adesh',location: { village: 'Lohegaon', city: 'Pune' }}] 
Output: [{name: 'Adesh',location: { planet: 'Earth' }}] 
Query: db.tb1.updateOne({name: 'Adesh'}, {$set: {'location': {planet: 'Earth'}}})


3. Add Single Property in existing object: 
----------------------------------
Input: [{name: 'Adesh',location: { planet: 'Earth' }}] 
Output: [{name: 'Adesh',location: {  planet: 'Earth' , village: 'Lohegaon'}}] 
Query: db.tb1.updateOne({name: 'Adesh'}, {$set: {'location.village': 'Palgad'}})

3. Add Multiple Property in existing object: 
----------------------------------
Input: [{name: 'Adesh',location: { planet: 'Earth' }}] 
Output: [{name: 'Adesh',location: { village: 'Lohegaon', city: 'Pune', planet: 'Earth' }}] 
Query: db.tb1.updateOne({name: 'Adesh'}, {$set: {'location.village': 'Lohegaon', 'location.city': 'Pune'}})

3. Remove Single property from existing object:
-----------------------------------------------
Input: [{name: 'Adesh',location: { village: 'Lohegaon', city: 'Pune', planet: 'Earth' }}] 
Output: [{name: 'Adesh',location: { village: 'Lohegaon', city: 'Pune' }}] 
Query: db.tb1.updateOne({name: 'Adesh'}, {$unset: {'location.planet': 1}})


3. Remove Multiple properties from existing object:
--------------------------------------------------
Input: [{name: 'Adesh', location: { village: 'Lohegaon', city: 'Pune', planet: 'Earth' }}] 
Output: [{name: 'Adesh', location: { village: 'Lohegaon' }}] 
Query: db.tb1.updateOne({name: 'Adesh'}, {$unset: {'location.city': 1, 'location.planet': 1}})

3. Delete Single Object: 
-------------------------
Input: [{name: 'Adesh', location: { vill: 'Lohegaon' } }]
output: [{name: 'Adesh' }]
Query: db.tb1.updateOne({name: 'Adesh'}, {$unset: {'location': 1}})

3. Delete Multiple Objects: 
-------------------------
Input: [{name: 'Adesh', location: { vill: 'Lohegaon' }, obj: {name: 'hey'} }]
output: [{name: 'Adesh' }]
Query: db.tb1.updateOne({name: 'Adesh'}, {$unset: {'location': 1, 'obj': 1}})

3. Rename a property of a Object: 
------------------------------
Input: [{name: 'Adesh', location: { vill: 'Lohegaon' }}] 
Output: [{name: 'Adesh', location: { village: 'Lohegaon' }}] 
Query: db.tb1.updateOne({name: 'Adesh'}, {$rename: {'location.vill': 'location.village'}`})

3. Rename Object Name: 
----------------------
Input: [{name: 'Adesh', location: { village: 'Lohegaon' }}] 
Output: [{name: 'Adesh', loc: { village: 'Lohegaon' }}] 
Query: db.tb1.updateOne({name: 'Adesh'}, {$rename: {'location': 'loc'}})


4. increase orders and decrease quantity: 
Input: [{sku: "abc123", quantity: 10, metrics: { orders: 2, ratings: 3.5 }}]
Output: [{sku: "abc123", quantity: 8, metrics: { orders: 4, ratings: 3.5 }}]
Query: db.tb1.updateOne({sku: "abc123"}, {$inc: {quantity: -2, "metrics.orders": 2}})
     
     
   


5. Replace whole array with another Array: 
------------------------------------------
Input: [{name: 'Adesh', hobbies: [ 'Swimming', 'Reading' ] }]
output: [{name: 'Adesh', hobbies: [ {name: 'Anime'}, {name: 'KDrama'} ] }]
Query: db.tb1.updateOne({name: 'Adesh'}, {$set: {hobbies: [{name: 'Anime'}, {name: 'KDrama'}]}})