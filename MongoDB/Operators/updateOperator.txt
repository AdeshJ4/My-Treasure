1. $set
2. $unset
3. $rename
4. $inc
5. $min
6. $max
7. $mul
8. $push
9. $addToSet
10.$pull
11.$pop
12.$slice



1. $set
-> $set field is used to 'update the value' of a field or to 'add a new field'.
-> If the field does not exist, $set will add a new field with the specified value.

2. $unset
-> The $unset operator 'deletes a particular field'.
-> If the field does not exist, then $unset does nothing.


3. $rename
-> The $rename operator 'rename the name of a field '
-> If the field does not exist, $rename does nothing


4. $inc
-> The $inc operator 'increments' a field by a 'specified value'.
-> The $inc operator accepts 'positive and negative values'.
-> If it +ve number then increase the no. if its -ve no then decrees no.
-> If the field does not exist, $inc creates the field and sets the field to the specified value.
-> Use of the $inc operator on a field with a null value will generate an error.

5. $min
-> Only updates the field value if the 'specified value' is less than the 'existing field value'.
-> If the field does not exist, the $min operator sets the field to the specified value
Input: [{ _id: 1, highScore: 800, lowScore: 200 } ]
Query: db.tb1.updateOne({_id: 1}, {$min: {lowScore: 150}})
Output: [{ _id: 1, highScore: 800, lowScore: 150 } ]


 6. $max
-> Only updates the field value if the specified value is greater than the existing field value.
-> If the field does not exists, the $max operator sets the field to the specified value.
Input: [{ _id: 1, highScore: 800, lowScore: 150 } ]
Output: [{ _id: 1, highScore: 800, lowScore: 200 } ]
Query: db.tb1.updateOne({_id: 1}, {$max: {lowScore: 200}})

7. $mul
-> Multiplies the value of the field by the specified amount.

Input: [ { "_id": 1, "quantity": 3 } ]
Output: [ { "_id": 1, "quantity": 6 }]
Query: db.tb1.updateOne({_id: 1}, {$mul: {quantity: 2}})  // 3 * 2 = 6



1. Add a Single Property:
-------------------------
Input: [{_id: 101, name: 'Adesh'}]
Output: [{name: 'Adesh', age: 22}]
Query: db.tb1.updateOne({Id: 101}, {$set: {age: 22}});



1. Change A Single Property : 
---------------------------
Input : {name: 'Max'}
Output: {name: 'Maxi'}
Query: db.tb1.updateOne({id: 101}, {$set: {name: 'Maxi'}})

2. add multiple properties: 
----------------------------
Input: [ { name: 'Adesh' } ]
Output: [ { name: 'Adesh' company: 'DXC', gender: 'M' } ]
Query: db.tb1.updateOne({name: 'Adesh'}, {$set: {company: 'DXC', gender: 'M'}})


2. Update Multiple Properties: 
------------------------------
Input: [ { name: 'Adesh' age: 21, height: 5 } ]
Output:[ { name: 'Adesh' age: 22, height: 6 } ]
Query: db.tb1.updateOne({name: 'Adesh'}, {$set: {age: 22, height: 6}})


3. Rename a field in all documents:
-----------------------------------
Input: [
   {
     "_id": 1,
     "alias": [ "The American Cincinnatus", "The American Fabius" ],
     "mobile": "555-555-5555",
     "nmae": { "first" : "george", "last" : "washington" }        <------------- Change this property
   },
   {
     "_id": 2,
     "alias": [ "My dearest friend" ],
     "mobile": "222-222-2222",
     "nmae": { "first" : "abigail", "last" : "adams" }
   }
]
output: Input: [
   {
     "_id": 1,
     "alias": [ "The American Cincinnatus", "The American Fabius" ],
     "mobile": "555-555-5555",
     "name": { "first" : "george", "last" : "washington" }
   },
   {
     "_id": 2,
     "alias": [ "My dearest friend" ],
     "mobile": "222-222-2222",
     "name": { "first" : "abigail", "last" : "adams" }
   }
]

Query: db.tb1.updateMany({}, {$rename: {"nmae": "name"}})
==========================================================================================================

Objects


3. Add Single Object : 
----------------------
Input: [{name: 'Adesh'}]
Output: [{name: 'Adesh',location: { village: 'Lohegaon', city: 'Pune' }}] 
Query: db.tb1.updateOne({name: "Adesh"}, {$set: {location: {street: 'lohegaon', city: 'Pune'}}})

3. Add Multiple Objects: 
------------------------
Input: [{name: 'Adesh'}] 
Output: [{name: 'Adesh', obj1: { bikeName: 'Yamaha' }, obj2: { carName: 'BMW' }}] 
Query: db.tb1.updateOne({ name: 'Adesh' }, { $set: { obj1:{carName: 'BMW'}, obj2:{bikeName: 'Yamaha'} }})

3. Update Single Object: 
----------------------------
Input: [{name: 'Adesh',location: { village: 'Lohegaon' }}] 
Output: [{name: 'Adesh',location: { village: 'Palgad' }}] 
Query: db.tb1.updateOne({name: 'Adesh'}, {$set: {'location.village': 'Palgad'}})



3. Update Multiple Objects: 
----------------------------
Input: [{name: 'Adesh',location: { village: 'Lohegaon', city: 'Pune' }}] 
Output: [{name: 'Adesh',location: { village: 'Palgad', city: 'Ratnagiri' }}] 
Query: db.tb1.updateOne({name: 'Adesh'}, {$set: {'location.village': 'Palgad', 'location.city': 'Ratnagiri'}})


3. Replace whole object with another Object: 
--------------------------------------------
Input: [{name: 'Adesh',location: { village: 'Lohegaon', city: 'Pune' }}] 
Output: [{name: 'Adesh',location: { planet: 'Earth' }}] 
Query: db.tb1.updateOne({name: 'Adesh'}, {$set: {'location': {planet: 'Earth'}}})


3. Add Single Property in existing object: 
----------------------------------
Input: [{name: 'Adesh',location: { planet: 'Earth' }}] 
Output: [{name: 'Adesh',location: {  planet: 'Earth' , village: 'Lohegaon'}}] 
Query: db.tb1.updateOne({name: 'Adesh'}, {$set: {'location.village': 'Palgad'}})

3. Add Multiple Property in existing object: 
----------------------------------
Input: [{name: 'Adesh',location: { planet: 'Earth' }}] 
Output: [{name: 'Adesh',location: { village: 'Lohegaon', city: 'Pune', planet: 'Earth' }}] 
Query: db.tb1.updateOne({name: 'Adesh'}, {$set: {'location.village': 'Lohegaon', 'location.city': 'Pune'}})

3. Remove Single property from existing object:
-----------------------------------------------
Input: [{name: 'Adesh',location: { village: 'Lohegaon', city: 'Pune', planet: 'Earth' }}] 
Output: [{name: 'Adesh',location: { village: 'Lohegaon', city: 'Pune' }}] 
Query: db.tb1.updateOne({name: 'Adesh'}, {$unset: {'location.planet': 1}})


3. Remove Multiple properties from existing object:
--------------------------------------------------
Input: [{name: 'Adesh', location: { village: 'Lohegaon', city: 'Pune', planet: 'Earth' }}] 
Output: [{name: 'Adesh', location: { village: 'Lohegaon' }}] 
Query: db.tb1.updateOne({name: 'Adesh'}, {$unset: {'location.city': 1, 'location.planet': 1}})

3. Delete Single Object: 
-------------------------
Input: [{name: 'Adesh', location: { vill: 'Lohegaon' } }]
output: [{name: 'Adesh' }]
Query: db.tb1.updateOne({name: 'Adesh'}, {$unset: {'location': 1}})

3. Delete Multiple Objects: 
-------------------------
Input: [{name: 'Adesh', location: { vill: 'Lohegaon' }, obj: {name: 'hey'} }]
output: [{name: 'Adesh' }]
Query: db.tb1.updateOne({name: 'Adesh'}, {$unset: {'location': 1, 'obj': 1}})

3. Rename a property of a Object: 
------------------------------
Input: [{name: 'Adesh', location: { vill: 'Lohegaon' }}] 
Output: [{name: 'Adesh', location: { village: 'Lohegaon' }}] 
Query: db.tb1.updateOne({name: 'Adesh'}, {$rename: {'location.vill': 'location.village'}`})

3. Rename Object Name: 
----------------------
Input: [{name: 'Adesh', location: { village: 'Lohegaon' }}] 
Output: [{name: 'Adesh', loc: { village: 'Lohegaon' }}] 
Query: db.tb1.updateOne({name: 'Adesh'}, {$rename: {'location': 'loc'}})


4. increase orders and decrease quantity: 
Input: [{sku: "abc123", quantity: 10, metrics: { orders: 2, ratings: 3.5 }}]
Output: [{sku: "abc123", quantity: 8, metrics: { orders: 4, ratings: 3.5 }}]
Query: db.tb1.updateOne({sku: "abc123"}, {$inc: {quantity: -2, "metrics.orders": 2}})
     
     
   

===========================================================================================================


Array : 

4. add a array:
---------------
Input : [{name: 'Adesh'}]
output: [{name: 'Adesh', hobbies: [ 'Swimming', 'Reading' ] }]
Query: db.tb1.updateOne({name: 'Adesh'}, {$set: {hobbies: ["Swimming", "Reading"]}})


4. Insert value inside a existing array.
---------------------------------------
Input : [{name: 'Adesh'}, hobbies: [ 'Swimming', 'Reading' ]]
output: [{name: 'Adesh',hobbies: [ 'Swimming', 'Reading', "Coading" ]}]
Query: db.tb1.updateOne({name: 'Adesh'}, {$push: {hobbies: "Coading"}})


Input : [{name: 'Adesh'}, hobbies: [ { name: 'Anime' } ]]
output: [{name: 'Adesh',hobbies: [ { name: 'Anime' }, { name: 'KDrama' } ] }]
Query: db.tb1.updateOne({name: 'Adesh'}, {$push: {hobbies: { name: 'KDrama' }}})


Input : [{name: 'Adesh'}, marks: [ 10, 20, 30] ]
output: [{name: 'Adesh',marks: [ 10, 20, 30, 40 ] }]
Query: db.tb1.updateOne({name: 'Adesh'}, {$push: {marks: 40}})


Input: [
   { _id: 1, scores: [ 44, 78, 38, 80, 89 ] },
   { _id: 2, scores: [ 45, 78, 38, 80, 89 ] } ,
   { _id: 3, scores: [ 46, 78, 38, 80, 89 ] } ,
   { _id: 4, scores: [ 47, 78, 38, 80, 89 ] }
]

Output: [
   { _id: 1, scores: [ 44, 78, 38, 80, 89, 95 ] },
   { _id: 2, scores: [ 45, 78, 38, 80, 89, 95 ] },
   { _id: 3, scores: [ 46, 78, 38, 80, 89, 95 ] },
   { _id: 4, scores: [ 47, 78, 38, 80, 89, 95 ] }
]
Query: db.tb1.updateMany({}, { $push: { scores: 95 } });



5. Replace whole array with another Array: 
------------------------------------------
Input: [{name: 'Adesh', hobbies: [ 'Swimming', 'Reading' ] }]
output: [{name: 'Adesh', hobbies: [ {name: 'Anime'}, {name: 'KDrama'} ] }]
Query: db.tb1.updateOne({name: 'Adesh'}, {$set: {hobbies: [{name: 'Anime'}, {name: 'KDrama'}]}})
    



$each: 

-> $each is used with $push operator.
-> It allows you to push multiple values at once instead of pushing a single value.
-> This can be particularly useful when you want to append multiple elements to an existing array.

ex.1
Input : 
{
  "_id": 1,
  "name": "Bob",
  "hobbies": ["Swimming", "Reading"]
}
Output : 
{
  "_id": 1,
  "name": "Bob",
  "hobbies": ["Swimming", "Reading", "Painting", "Gardening"]
}
Query: db.tb1.updateOne({_id: 1}, {$push: {hobbies: {$each: ["Painting", "Gardening"]}}})

ex.2
Input: {
  "_id": 1,
  "grades": [
    { "subject": "Math", "score": 90 },
    { "subject": "History", "score": 85 }
  ]
}
Output: {
  "_id": 1,
  "grades": [
    { "subject": "Math", "score": 90 },
    { "subject": "History", "score": 85 },
    { "subject": "Science", "score": 92 },
    { "subject": "English", "score": 88 }
  ]
}
Query: db.tb1.updateOne({_id: 1}, {$push: {grades: {$each: [{ "subject": "Science", "score": 92 },{ "subject": "English", "score": 88 }]}}})


=======================================

9. $addToSet: 

The $addToSet operator in MongoDB is used to add a value to an array only if it does not already exist. 
It ensures that the array remains a set (no duplicates).
if array is empty or does not exists then it create the array with that name and values.

// Adding a New Value to an Array
db.senwell.updateOne({_id: 3}, {$addToSet: {hobbies: "Web-Series"}})

// Adding Multiple Values Using $each
db.tb1.updateOne({_id: 1}, { $addToSet: { hobbies: { $each: [ "Movies", "Gaming", "Swim" ] } } })


// Adding a Value to an Array in a Nested Document, 
I/P: { "_id": 3, "profile": { "hobbies": [ "Coding", "Gaming" ] } }
db.tb1.updateOne({_id: 1}, { $addToSet: { "profile.hobbies": "Movies" } });

// Adding a Value to a Non-Existent Array
db.senwell.updateOne({_id: 1}, { $addToSet: { cars: "Movies" } })  // cars does not exist but it will be created.





=======================================


10. $pull: 

The $pull operator in MongoDB is used to "remove specific values from an array" in a document. 
It removes all instances of the specified value(s) that match a condition

// remove "Movies" from "hobbies" array.
db.tb1.updateOne({_id: 1}, {$pull: {hobbies: "Movies"}})

// remove all items which are less than 50
db.tb1.updateOne({_id: 1}, {$pull: {scores: {$lt: 50}}})

// Remove all hobbies that start with the letter "C":
db.tb1.updateOne({ _id: 1 },{ $pull: { hobbies: { $regex: "^C" } } });

//  Remove Duplicates Programmatically
db.tb1.updateOne({ _id: 1 },{ $set: { hobbies: [...new Set(doc.hobbies)] } });


// Remove Hobbies Based on Length (Remove all hobbies that are shorter than 5 characters)
db.tb1.updateOne({ _id: 1 }, { $pull: { hobbies: { $where: "this.length < 5" } } })

// remove multiple values
db.tb1.updateOne({_id:1},  { $pull: { hobbies: { $in: [ "Swim", "Read" ] } } })


=======================================


11.$pop

The $pop operator in MongoDB is used to remove an element from the start or end of an array. 
It modifies the array by "popping" one element, based on the specified direction.
Removes only one element: $pop always removes one element, either from the start or end of the array.
If the array is already empty, $pop will do nothing.

Syntax: db.tb1.updateOne({ <filter> }, { $pop: { <arrayField>: <value> } })
<value>:
Use 1 for the last element.
Use -1 for the first element


Example Scenarios: 
Input Document:
{ "_id": 1, "hobbies": [ "Swim", "Read", "Coding", "Movies", "Gaming" ] }

// Remove the Last Element
db.tb1.updateOne({_id: 1}, {$pop: {hobbies: 1}})

// Remove the First Element
db.tb1.updateOne({_id: 1}, {$pop: {hobbies: -1}})



=======================================


12. $slice

The $slice operator in MongoDB is used to "limit the number of elements returned from an array field". 
It is often used in "conjunction with projection" to include a subset of an array in the query result, 
since we use second object for projection.
However, it does not modify the data in the database.


Syntax:

db.collection.find({ <filter> },{ <arrayField>: { $slice: <value> } });

<value>:
A positive number (N): Returns the first N elements of the array.
A negative number (-N): Returns the last N elements of the array.
[skip, limit]: Returns a subset of the array, skipping the first skip elements and including up to limit elements after.



// Return the First 3 Elements
db.tb1.find({_id: 1}, {hobbies: {$slice: 3}})

// Return the Last 3 Elements
db.tb1.slice({_id: 1}, {hobbies: {$slice: -3}})

// skip first 2 elements and return 3 elements [skip, limit]
db.tb1.find({_id: 1}, {hobbies: {$slice: [2, 3]}}) // o/p-> ["C", "D", "E"]











































