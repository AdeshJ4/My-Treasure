// Operators to work with array : 

1. $all :
2. $elemMatch
3. $size
5. $ifNull
6. $push
8. $pop
9. $pull
7. $addToSet
10.$each
11.$slice



Note : You can access 'array elements' like objects means using 'dot notation'.
eg. db.hobbies.find({'hobbies.title': {$eq: 'Sports'}});
Sample Data:
[
  {
    "_id": 1,
    "name": "John",
    "hobbies": [
      { "title": "Sports", "level": "Expert" },
      { "title": "Music", "level": "Beginner" }
    ]
  },
  {
    "_id": 2,
    "name": "Alice",
    "hobbies": [
      { "title": "Reading", "level": "Intermediate" },
      { "title": "Sports", "level": "Advanced" }
    ]
  },
  {
    "_id": 3,
    "name": "Bob",
    "hobbies": [
      { "title": "Gaming", "level": "Professional" }
    ]
  }
]



output:
[
  {
    "_id": 1,
    "name": "John",
    "hobbies": [
      { "title": "Sports", "level": "Expert" },
      { "title": "Music", "level": "Beginner" }
    ]
  },
  {
    "_id": 2,
    "name": "Alice",
    "hobbies": [
      { "title": "Reading", "level": "Intermediate" },
      { "title": "Sports", "level": "Advanced" }
    ]
  }
]




1. $all :
---------

The $all operator is used to match documents where an array contains all the specified values, regardless of order. 
It is useful when searching for documents that contain multiple values in an array.

1️⃣ Basic Example – Find Users with Multiple Interests

db.users.insertMany([
  { name: "Alice", interests: ["sports", "music", "reading"] },
  { name: "Bob", interests: ["music", "gaming", "reading"] },
  { name: "Charlie", interests: ["sports", "music", "anime"] },
  { name: "Charlie", interests: "anime" },
]);

🔹 Query – Find users who like both "music" and "reading":
db.users.find({ interests: { $all: ["music", "reading"] } });

✅ Result:
Alice (["sports", "music", "reading"])
Bob (["music", "gaming", "reading"])



// Using $all with Non-Array Fields, 
db.tb1.find({ interests: { $all: [ "anime" ] } }); 
result: [
  { name: "Charlie", interests: ["sports", "music", "anime"] },
  { name: "Charlie", interests: "anime" },
]
Note: The $all operator works with non-array fields by treating the field value as an array of one element.


// Combining $all with Nested Arrays
db.users.insertMany([
  { name: "Alice", interests: ["sports", "music", "reading"], scores:[[10, 20], [30, 40]]},
  { name: "Bob", interests: ["music", "gaming", "reading"], scores:[[10, 20], [60, 70]]},
]);
db.tb1.find( { scores: { $all: [ [ 30, 40 ] ] } });  // Alice returned.
Note: MongoDB treats the sub-array [30, 40] as a single element when using $all.


// Combining $all with Nested Objects
db.users.insertMany([
  { "_id": 7, "features": [ { name: "Processor", value: "Intel" }, { name: "RAM", value: "8GB" } ] },
  { "_id": 8, "features": [ { name: "Processor", value: "Microsoft" }, { name: "RAM", value: "12GB" } ] }
]);
db.tb1.find({features: { $all: [{ name: "Processor", value: "Intel" }, { name: "RAM", value: "8GB" }]}}); //  "_id": 7 returned
Note: MongoDB treats the sub-object as a single element when using $all.


2️⃣ $all vs $in – Key Difference
$all → Ensures all specified values exist in the array.
$in → Matches if at least one value exists in the array.
🔹 Example with $in (matches any value):

db.users.insertMany([
  { name: "Alice", interests: ["sports", "music", "reading"] },
  { name: "Bob", interests: ["music", "gaming", "reading"] },
  { name: "Charlie", interests: ["sports", "music"] }
]);


db.users.find({ interests: { $in: ["music", "reading"] } });
✅ This would return all three users (Alice, Bob, and Charlie), even if they have only one of the specified values.

🔹 Example with $all (matches all values):
db.users.find({ interests: { $all: ["music", "reading"] } });
✅ This returns only Alice and Bob, because they both have both "music" and "reading" in their interests.




=============================================================================================================


2. $elemMatch

-> The $elemMatch operator is used to filter documents based on conditions inside an array of objects. 
It ensures that at least one array element matches all conditions specified inside $elemMatch.

The $elemMatch operator is used to match documents where at least one element in an array field matches all specified query criteria. 
This is particularly useful when querying "arrays with objects" or when multiple conditions need to be applied to a single element within 
an array.



1️⃣ Basic Example – Find a Student with a Specific Score
Input : 
db.students.insertMany([
  { name: "Alice", scores: [{ subject: "Math", score: 85 }, { subject: "English", score: 78 }] },
  { name: "Bob", scores: [{ subject: "Math", score: 92 }, { subject: "English", score: 88 }] },
  { name: "Charlie", scores: [{ subject: "Math", score: 75 }, { subject: "English", score: 90 }] }
]);

🔹 Find students who scored more than 80 in Math
> db.students.find({scores: { $elemMatch: { subject: "Math", score: { $gt: 80 } } } })

✅ Result:
Alice (Math: 85)
Bob (Math: 92)


2️⃣ Using $elemMatch with Multiple Conditions
🔹 Find students who have:
Math score > 80
English score < 80

db.students.find({
  scores: { $elemMatch: { subject: "Math", score: { $gt: 80 } } },
  scores: { $elemMatch: { subject: "English", score: { $lt: 80 } } }
});

✅ Result:
Alice (Math: 85, English: 78)


3️⃣ Example with Employees – Find a Developer with Specific Skills:

db.employees.insertMany([
  { name: "John", skills: [{ tech: "JavaScript", level: "Advanced" }, { tech: "Python", level: "Intermediate" }] },
  { name: "Jane", skills: [{ tech: "Java", level: "Expert" }, { tech: "C++", level: "Beginner" }] },
  { name: "Mike", skills: [{ tech: "JavaScript", level: "Beginner" }, { tech: "Python", level: "Advanced" }] }
]);

🔹 Find employees with JavaScript skills at an Advanced level:
db.employees.find({
  skills: { $elemMatch: { tech: "JavaScript", level: "Advanced" } }
});
✅ Result:
John (JavaScript: Advanced, Python: Intermediate)


4️⃣ Example – Finding Orders with Specific Items and Quantities
db.orders.insertMany([
  { orderId: 1, items: [{ product: "Laptop", quantity: 2 }, { product: "Mouse", quantity: 1 }] },
  { orderId: 2, items: [{ product: "Laptop", quantity: 1 }, { product: "Keyboard", quantity: 2 }] },
  { orderId: 3, items: [{ product: "Monitor", quantity: 1 }, { product: "Mouse", quantity: 3 }] }
]);

🔹 Find orders where a customer bought more than 1 Laptop:

db.orders.find({
  items: { $elemMatch: { product: "Laptop", quantity: { $gt: 1 } } }
});

✅ Result:
Order ID 1 (Laptop: 2, Mouse: 1)


find user who has grade above 90
I/P: 
[
  { _id: 1, name: 'Alice', grades: [ 10,20, 30 ] },
  { _id: 2, name: 'Bob', grades: [ 30, 40, 50 ] },
  { _id: 3, name: 'Max', grades: [ 80, 90, 100 ] },
  { _id: 4, name: 'Mosh', grades: [ 10, 20, 10 ] },
]
output:
[ { _id: 3, name: 'Max', grades: [ 80, 90, 100 ] } ]
Query> 
db.tb1.find({ grades: { $gt: 90 }})

=============================================================================================================

3. $size: 
---------
-> the size operator returns the documents which contain array field and size of array field equal to the value specified inside $size operator.
-> It is useful when filtering documents based on the length of an array.
-> $size only checks for exact values
You cannot use $size: { $gt: 2 } to find arrays with more than 2 elements.
Instead, use $expr with $size for range queries.


db.users.insertMany([
  { name: "Alice", interests: ["sports", "music", "reading"] },
  { name: "Bob", interests: ["music", "gaming"] },
  { name: "Charlie", interests: ["sports", "music", "reading", "traveling"] }
]);
Query – Find users who have exactly 3 interests
db.users.find({ interests: { $size: 3 } });
✅ Result: Alice (["sports", "music", "reading"])


=============================================================================================================

$push: 

-> The $push operator appends a specified value to an array.
-> if the array field specified in $push does not exist, MongoDB will create it and set it to the specified 
value.
{ "_id": 1, "name": "John" }
db.tb1.updateOne({_id: 101}, {$push: {hobbies: 'Swimming'}})
{ "_id": 1, "name": "John", "hobbies": ["Swimming"] }

Append a Value to an Array
{ _id: 1, scores: [ 44, 78, 38, 80 ] } 
db.students.updateOne({_id: 1}, {$push: {scores: 10}})
{ _id: 1, scores: [ 44, 78, 38, 80, 10 ] } 


Append object:
[
  {
    _id: 1,
    name: 'Alice',
    interests: [
      { name: 'A', age: 22 },
    ]
  },
  {
    _id: 2,
    name: 'Bob',
    interests: [ { name: 'C', age: 12 }, { name: 'D', age: 239 } ]
  },
  {
    _id: 3,
    name: 'Charlie',
    interests: [ { name: 'E', age: 32 }, { name: 'F', age: 29 } ]
  }
]
Query> db.tb1.findOneAndUpdate({_id: 1}, {$push: { interests: {name:"Z", age: 23}}}, { returnDocument: 'after', {projection: { _id: 0, interests: 1 }}})
[
  {
    interests: [
      { name: 'A', age: 22 },
      { name: 'Z', age: 23 }
    ]
  },
  {
    interests: [ { name: 'C', age: 12 }, { name: 'D', age: 239 } ]
  },
  {
    interests: [ { name: 'E', age: 32 }, { name: 'F', age: 29 } ]
  }
]





Append a Value to Arrays in Multiple Documents
[
   { _id: 1, scores: [ 45, 78, 38, 80, 89 ] } ,
   { _id: 2, scores: [ 45, 78, 38, 80, 89 ] } ,
]
db.tb1.updateMany({}, {$push: {scores: 95}})
[
   { _id: 1, scores: [ 44, 78, 38, 80, 89, 95 ] },
   { _id: 2, scores: [ 45, 78, 38, 80, 89, 95 ] }
]

=============================================================================================================

$each: 

-> $each operator is used with '$push' and '$addToSet' operator.
-> $each operator is used to Append 'Multiple Values' to an Array
{ _id: 1, scores: [ 44, 78, 38, 80 ] } 
db.tb1.updateOne({_id: 1}, {$push: {scores: {$each: [10, 20, 30]}}})
{ "_id": 1, "scores": [ 44, 78, 38, 80, 10, 20, 30 ] }

=============================================================================================================

$addToSet: 

-> The $addToSet operator in MongoDB is used to 'add unique elements' to an array.
-> prevent duplication elements.

db.tb1.updateOne({ _id: 1 }, { $addToSet: { scores: { $each: [10, 20, 30] } } })

=============================================================================================================

$pull: 

-> This operator is used to 'remove all instances' of specified value.

ex.1: remove all occurrences of specified value from array.
{ "_id": 1, "grades": [85, 90, 92, 85, 88] }
Query> db.users.updateOne({_id: 1}, {$pull: {grades: 85}})
{ "_id": 1, "grades": [90, 92, 88] }

ex.2: remove all occurrences of multiple specified value from array.
{ "_id": 1, "grades": [85, 90, 92, 85, 88] }
Query> db.users.updateOne({_id: 1}, {$pull: {grades: {$in: [85, 88]}}})
{ "_id": 1, "grades": [90, 92] }

ex.2: remove all occurrences of specified value according to condition.
{ "_id": 1, "grades": [85, 90, 92, 85, 88] }
Query> db.users.updateOne({_id: 1}, {$pull: {grades: {$gt: 86}}})
{ "_id": 1, "grades": [85, 85] }


ex.3 Removing an object where product is "Phone"
[
  { 
    _id: 1,  customer: "Alice",  items: [{ product: "Laptop", quantity: 1 }, { product: "Phone", quantity: 2 } ]  
  }
]
output:
[
  { 
    _id: 1,  customer: "Alice",  items: [{ product: "Laptop", quantity: 1 } ]  
  }
]
Query>
db.orders.updateOne({_id: 1},  { $pull: { items: { product: "Phone" } } } )




=============================================================================================================


$pop: 'Removes' the 'first or last' element of an array.

db.users.updateOne({ _id: 1 }, { $pop: { marks: 1 } }) // removes the last element
db.users.updateOne({ _id: 1 }, { $pop: { marks: -1 } }) // removes the first element

=============================================================================================================


$slice: $slice is used in combination with '$push' to 'control the size 'of the array.

ex. 1 store only last five elements inside array.
{  "_id": 1, "grades": [10, 20, 30, 40, 50] }
Query> db.students.updateOne({ _id: 1 }, { $push: { grades: { $each: [60, 70], $slice: -5 } } })   // last 5
{  "_id": 1, "grades": [30, 40, 50, 60, 70] }

ex.2  store only first three elements inside array.
{  "_id": 1, "grades": [10, 20, 30, 40, 50] }
Query> db.students.updateOne({ _id: 1 }, { $push: { grades: { $each: [60, 70], $slice: 3 } } })   // first 3
{  "_id": 1, "grades": [10, 20, 30] }

db.users.updateOne({_id: 101}, {$push: {hobbies: {$each: ["A", "B"], $slice: 3}}})

find: 
// Return the First 3 Elements
db.tb1.find({_id: 1}, {hobbies: {$slice: 3}})

// Return the Last 3 Elements
db.tb1.slice({_id: 1}, {hobbies: {$slice: -3}})

// skip first 2 elements and return 3 elements [skip, limit]
db.tb1.find({_id: 1}, {hobbies: {$slice: [2, 3]}}) 
=============================================================================================================


 $ifNull: 


The $ifNull operator in MongoDB is used to handle null or missing values by providing a "default value" when a field is null or does 
not exist.


if age is null or absent then return it as "Unknown"

Hint: $ifNull treats "undefined" and "missing" fields as null

Input: 
[
  { _id: 1, name: "Alice", age: 25, city: "New York" },
  { _id: 2, name: "Bob", age: null, city: "London" },             // Null is age
  { _id: 3, name: "Charlie" }                                     // Missing `age` field
]

Output: 
[
  { "_id": 1, "name": "Alice", "age": 25 },
  { "_id": 2, "name": "Bob", "age": "Unknown" },        // age was null, replaced with "Unknown"
  { "_id": 3, "name": "Charlie", "age": "Unknown" }     // age was missing, replaced with "Unknown"
]

Query 1>
db.users.find({}, { name: 1, age: { $ifNull: ["$age", "Unknown"] } })

Query 2> 
db.users.aggregate([
  {
    $project: {
      name: 1,
      age: { $ifNull: ["$age", "Unknown"] } // Replace null/missing age with "Unknown"
    }
  }
])



db.users.aggregate([
  {
    $project: {
      name: 1,
      age: { $ifNull: ["$age", "Unknown"] }
    }
  }
]);
