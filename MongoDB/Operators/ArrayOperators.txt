// Operators to work with array : 

1. $all :
2. $elemMatch
3. $size
4. $unwind
5. $ifNull
6. $push
8. $pop
9. $pull
7. $addToSet
10.$each
11.$slice


data: 

db.senwell.insertMany([
  {
    _id: ObjectId("65658eeb0cea2748b06400af"),
    name: 'Max',
    hobbies: [
      { title: 'Sports', frequency: 3 },
      { title: 'Cooking', frequency: 6 }
    ],
    phone: 131782734
  },
  {
    _id: ObjectId("65658eeb0cea2748b06400b0"),
    name: 'Manuel',
    hobbies: [
      { title: 'Cooking', frequency: 5 },
      { title: 'Cars', frequency: 2 }
    ],
    phone: '012177972',
    age: 30
  },
  {
    _id: ObjectId("65658eeb0cea2748b06400b1"),
    name: 'Anna',
    hobbies: [
      { title: 'Sports', frequency: 2 },
      { title: 'Yoga', frequency: 3 }
    ],
    phone: '80811987291',
    age: null
  },
  {
    _id: ObjectId("65658eeb0cea2748b06400b2"),
    name: 'Chris',
    hobbies: [ 'Sports', 'Cooking', 'Hiking' ]
  }
])


Note : You can access 'array elements' like objects means using 'dot notation'.
eg. db.hobbies.find({'hobbies.title': {$eq: 'Sports'}});



1. $all :
---------

The $all operator in MongoDB is a "query operator" used to match documents where the array field contains all the specified elements. 
This operator is useful when you need to ensure that all specified values are present in the array, regardless of their order or 
additional elements

Input Document:
db.tb1.insertMany([
  { "_id": 1, "tags": [ "red", "blue", "green", "orange" ] },
  { "_id": 2, "tags": [ "red", "yellow" ] },
  { "_id": 3, "tags": [ "blue", "green", "yellow" ] },
  { "_id": 4, "tags": "orange" },
  { "_id": 5, "scores": [ [ 10, 20 ], [ 30, 40 ] ] },
  { "_id": 6, "scores": [ [ 10, 20 ], [ 50, 60 ] ] },
  { "_id": 7, "features": [ { name: "Processor", value: "Intel" }, { name: "RAM", value: "8GB" } ] },
  { "_id": 8, "features": [ { name: "Processor", value: "Microsoft" }, { name: "RAM", value: "12GB" } ] }
])

// Find documents where the tags array contains both "red" and "blue".
db.tb1.find({ tags: { $all: [ "green", "blue" ] } }) ;  // Order of Values Does Not Matter, _id 1 & 3 returned

// Using $all with Non-Array Fields, 
db.tb1.find({ tags: { $all: [ "orange" ] } });  // _id 1 & 3 returned
Note: The $all operator works with non-array fields by treating the field value as an array of one element.


// Combining $all with Nested Arrays
db.tb1.find( { scores: { $all: [ [ 30, 40 ] ] } });  // _id 5 returned.
Note: MongoDB treats the sub-array [30, 40] as a single element when using $all.

// Combining $all with Nested Objects
db.tb1.find({features: { $all: [{ name: "Processor", value: "Intel" }, { name: "RAM", value: "8GB" }]}}); //  "_id": 7 returned
Note: MongoDB treats the sub-object as a single element when using $all.


//  Combining $all with Other Operators
db.collection.find(
   {
      $and: [
         { tags: { $all: [ "red", "blue" ] } },
         { _id: { $gt: 1 } }
      ]
   }
);   

=============================================================================================================


2. $elemMatch

-> this operator return documents which contain 'array field' and 'at least one element' of array field should 
'satisfy condition' specify by the $elemMatch operator.

The $elemMatch operator is used to match documents where at least one element in an array field matches all specified query criteria. 
This is particularly useful when querying "arrays with objects" or when multiple conditions need to be applied to a single element within 
an array.

Syntax:
db.collection.find( { <arrayField>: { $elemMatch: { <query1>, <query2>, ... } } })
<query1>, <query2>, ...: The conditions to match on a single element of the array.


Input : 
db.tb1.insertMany([
   { "_id": 1, "scores": [ { "subject": "math", "score": 85 }, { "subject": "english", "score": 90 } ] },
   { "_id": 2, "scores": [ { "subject": "math", "score": 70 }, { "subject": "english", "score": 80 } ] },
   { "_id": 3, "scores": [ { "subject": "math", "score": 95 }, { "subject": "english", "score": 85 } ] }
]);


// Find documents where the scores array contains an object with subject equal to "math" and score greater than 80.
db.tb1.find({ scores: { $elemMatch: { subject: "math", score: { $gt: 80 } } } }); // _id 1 & 3 returned












ex.1:
find user who has grade above 91 or grade array must contain grade element $gte 90
I/P: 
[
  { _id: 1, name: 'Alice', grades: [ 85, 90, 88 ] },
  { _id: 2, name: 'Bob', grades: [ 92, 87, 95 ] }
]
o/p: [ { _id: 2, name: 'Bob', grades: [ 92, 87, 95 ] } ]
Query> db.tb1.find({grades: {$elemMatch: {$gt: 90}}})

example 3: 
hobbies is array, and each element of hobbies contain title and frequency.
find all users which have hobby of 'Sports' and frequency gte 3.
that means you have to check each element of array that it contains title='Sports' and frequency>=3.
array element should contain both title: 'Sports' and frequency: 3
eg> 
correct array element: 
{
  title: 'Sports',
  frequency: 3
}

Data: 
db.tb1.insertMany([
  {
    "name": "Max",
    "hobbies": [
      {
        "title": "Sports",
        "frequency": 3
      },
      {
        "title": "Cooking",
        "frequency": 6
      }
    ],
    "phone": 131782734
  },
  {
    "name": "Manuel",
    "hobbies": [
      {
        "title": "Cooking",
        "frequency": 5
      },
      {
        "title": "Cars",
        "frequency": 2
      }
    ],
    "phone": "012177972",
    "age": 30
  },
  {
    "name": "Anna",
    "hobbies": [
      {
        "title": "Sports",
        "frequency": 2
      },
      {
        "title": "Yoga",
        "frequency": 3
      }
    ],
    "phone": "80811987291",
    "age": null
  },
  {
    "name": "Chris",
    "hobbies": ["Sports", "Cooking", "Hiking"]
  }
]
);
Query:  db.tb1.find({hobbies: {$elemMatch: {$and: [{title: 'Sports'}, {frequency: {$gte: 3}}]}}})
output: 
[
  {
    _id: ObjectId("65a37b7e4a21c3f9948b4b18"),
    name: 'Max',
    hobbies: [
      { title: 'Sports', frequency: 3 },
      { title: 'Cooking', frequency: 6 }
    ],
    phone: 131782734
  }
]

=============================================================================================================

3. $size: 
---------
-> the size operator returns the documents which contain array field and size of that array field equal to the value specified 
inside $size operator.
-> size operator only takes number and not another document with operator.
eg. find({hobbies: {$size: {$gt: 3}}}) // not acceptable
eg.return me all documents who has hobbies elements equal to 3.
-> db.tb1.find({hobbies: {$size: 3}})

=============================================================================================================

$push: 

-> The $push operator appends a specified value to an array.
-> if the array field specified in $push does not exist, MongoDB will create it and set it to the specified 
value.
{ "_id": 1, "name": "John" }
db.tb1.updateOne({_id: 101}, {$push: {hobbies: 'Swimming'}})
{ "_id": 1, "name": "John", "hobbies": ["Swimming"] }


Append a Value to an Array
{ _id: 1, scores: [ 44, 78, 38, 80 ] } 
db.students.updateOne({_id: 1}, {$push: {scores: 10}})
{ _id: 1, scores: [ 44, 78, 38, 80, 10 ] } 


Append a Value to Arrays in Multiple Documents
[
   { _id: 1, scores: [ 45, 78, 38, 80, 89 ] } ,
   { _id: 2, scores: [ 45, 78, 38, 80, 89 ] } ,
]
db.tb1.updateMany({}, {$push: {scores: 95}})
[
   { _id: 1, scores: [ 44, 78, 38, 80, 89, 95 ] },
   { _id: 2, scores: [ 45, 78, 38, 80, 89, 95 ] }
]

=============================================================================================================

$each: 

-> $each operator is used with '$push' and '$addToSet' operator.
-> $each operator is used to Append 'Multiple Values' to an Array
{ _id: 1, scores: [ 44, 78, 38, 80 ] } 
db.tb1.updateOne({_id: 1}, {$push: {scores: {$each: [10, 20, 30]}}})
{ "_id": 1, "scores": [ 44, 78, 38, 80, 10, 20, 30 ] }


=============================================================================================================

$addToSet: 

-> The $addToSet operator in MongoDB is used to 'add unique elements' to an array.
-> prevent duplication elements.

db.tb1.updateOne(
  { _id: 1 },
  { $addToSet: { scores: { $each: [10, 20, 30] } } }
)

=============================================================================================================

$pull: 

-> This operator is used to 'remove all instances' of specified value.

ex.1: remove all occurrences of specified value from array.
{ "_id": 1, "grades": [85, 90, 92, 85, 88] }
Query> db.users.updateOne({_id: 1}, {$pull: {grades: 85}})
{ "_id": 1, "grades": [90, 92, 88] }

ex.2: remove all occurrences of multiple specified value from array.
{ "_id": 1, "grades": [85, 90, 92, 85, 88] }
Query> db.users.updateOne({_id: 1}, {$pull: {grades: {$in: [85, 88]}}})
{ "_id": 1, "grades": [90, 92] }

ex.2: remove all occurrences of specified value according to condition.
{ "_id": 1, "grades": [85, 90, 92, 85, 88] }
Query> db.users.updateOne({_id: 1}, {$pull: {grades: {$gt: 86}}})
{ "_id": 1, "grades": [85, 85] }

=============================================================================================================


$pop: 'Removes' the 'first or last' element of an array.

db.users.updateOne({ _id: 1 }, { $pop: { marks: 1 } }) // removes the last element
db.users.updateOne({ _id: 1 }, { $pop: { marks: -1 } }) // removes the first element

=============================================================================================================


$slice: $slice is used in combination with '$push' to 'control the size 'of the array.

ex. 1 store only last five elements inside array.
{  "_id": 1, "grades": [10, 20, 30, 40, 50] }
Query> db.students.updateOne({ _id: 1 }, { $push: { grades: { $each: [60, 70], $slice: -5 } } })
{  "_id": 1, "grades": [30, 40, 50, 60, 70] }

ex.2  store only first three elements inside array.
{  "_id": 1, "grades": [10, 20, 30, 40, 50] }
Query> db.students.updateOne({ _id: 1 }, { $push: { grades: { $each: [60, 70], $slice: 3 } } })
{  "_id": 1, "grades": [10, 20, 30] }



db.users.updateOne({_id: 101}, {$push: {hobbies: {$each: ["A", "B"], $slice: 3}}})




