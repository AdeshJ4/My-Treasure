There are 2 methods to find and select data from a MongoDB collection, 

1. find()
2. findOne().
3. findOneAndDelete()
4. findOneAndReplace()
5. findOneAndUpdate()


db.person.countDocuments({"dob.age": {$gt: 60}});
db.person.find({"dob.age": {$gt: 60}}).count();

count() (deprecated) can be used with a cursor to get the count.
countDocuments() is a more modern and efficient method designed specifically to count documents based on a filter, without chaining it with find().


db.users.find({})
db.users.find({}, {_id: 1, name: 1, age: 1})   // projection
db.users.findOne({_id: 101})
db.users.findOne({_id: 101}, {_id: 1, name: 1})  // projection
db.users.findOneAndDelete({_id: 101},  { projection: { _id: 0, name: 1 } });
db.users.findOneAndReplace({_id: 101}, {_id: 101, name: 'Adesh'}, {returnDocument: 'after', projection: {_id: 0, name: 1}})
db.users.findOneAndUpdate({_id: 101}, {$set: {name: 'Adesh Jadhav', age: 23}}, {returnDocument: 'after', projection: {_id: 1, name: 1, age: 1}})

If you want to create the document if it does not exist, use { upsert: true }:
```
db.users.findOneAndUpdate(
  { _id: 101 }, 
  { $set: { name: 'Adesh Jadhav', age: 23 } }, 
  { returnDocument: 'after', projection: { _id: 1, name: 1, age: 1 }, upsert: true }
);
```

1. find()

-> find() method 'return all documents' from collection if no 'query object' is passed.
-> This method accepts a query object.
-> if query object is pass then selected documents will be returned who match the 
    query object.
-> db.users.find()
-> db.users.find({age: {$gt: 22}})


playGround> db.senwell.find({}, {_id: 1, name: 1, age: 1})  // second object is used for projection
[
  { _id: 101, name: 'Adesh Yadav', age: 22 },
  { _id: 102, name: 'adesh Jadhav', age: 25 },
]





2. findOne()

-> findOne() method return 'only first document'.
-> This method also 'accepts query object'
-> If left empty, it will 'return the first document' it finds.
-> db.users.findOne()
-> db.users.findOne({_id: 1})



3. findOneAndDelete() and findOneAndReplace(): 

-> findOneAndDelete is focused on deleting a document, while findOneAndReplace is focused on replacing a 
document with a new one.
-> findOneAndDelete: Returns the 'deleted document' or 'null' if no document is found.
-> findOneAndReplace: By default, returns the 'deleted document'.

// Delete a document where the 'username' is 'john_doe'
db.tb1.findOneAndDelete({name: 'john_doe'});

// Delete a document where the 'status' is 'inactive' and return only the 'username' field
db.tb1.findOneAndDelete({status: 'inactive'}, { projection: {name: 1, _id: 0}})

// Replace a document where the 'username' is 'john_doe' with a new document
db.tb1.findOneAndReplace({ username: 'john_doe' }, { username: 'jane_doe', age: 30 })

// Replace a document where the 'status' is 'active' and return only the 'username' field
db.tb1.findOneAndReplace({ status: 'active' }, { username: 'new_username', status: 'inactive' }, {projection: {userName: 1, _id: 0}})



4. findOneAndUpdate()

-> will find and update document according to query object and return original document.
-> The option { returnDocument: "before" } ensures that the method returns the original document before the 
update.

db.users.findOneAndUpdate({_id: 101}, {$set: {name: 'new Name', age: 22}}, {returnDocument: 'after'})





Projection : 

second object represent as a projection object where you can include or exclude or rename a field.

in bellow example we have created two fields called firstName and isAdult.

1️⃣
db.users.find({}, {_id: 0, firstName: '$name.first',  'dob.age': 1, isAdult: { $gte: ["$dob.age", 18]}})
o/p:
[
  { dob: { age: 59 }, firstName: 'victor', isAdult: true },
  { dob: { age: 33 }, firstName: 'carl', isAdult: true },
  { dob: { age: 29 }, firstName: 'zachary', isAdult: true },
  { dob: { age: 35 }, firstName: 'anne', isAdult: true }
]


2️⃣.
Query> db.shops.find({}, { result: {$subtract: ["$year", "$amount"]}})
[
  { _id: 1, result: 1922 },
  { _id: 2, result: 1822 },
  { _id: 3, result: 1723 },
  { _id: 4, result: 1872 },
  { _id: 5, result: 1773 },
  { _id: 6, result: 1673 }
]