map();
-> Does not override original array but you can modify it.
-> map() return new array by calling a callback function on each element of array
-> If you want to do any arithmetic operation with each element of array then you can do it and return that result;
-> It crates a new Array.
-> map() does not execute the function for empty elements.
-> If you want to update existing value of array  or you want to update all values of array or you want specific property array like array of ids or array of names 
intead of whole objects.


// ex. 1
const arr = [10, 20, 30];
const newArr = arr.map((ele)=>{
    return ele * 10;
})  // [100, 200, 300];


//update
const arr = [
  { id: 101, name: "John" },
  { id: 102, name: "Jane" },
  { id: 103, name: "Doe" }
];
const newArr = arr.map((ele)=>{
    return ele.id === 103 ? {...ele, name: 'Adesh'} : ele ;
});


// ex.3
const users = [
  { id: 1, name: "John" },
  { id: 2, name: "Jane" },
  { id: 3, name: "Doe" }
];
const onlyIds = users.map((ele)=>{
    return ele.id;
}); // Output: [1, 2, 3]



// ex. 4
const fruits = ["apple", "banana", "orange"];
const indexedFruits = fruits.map((ele, index)=>{
    return `${index + 1}. : ${ele}`
}); //Output: ["1. apple", "2. banana", "3. orange"]


ex.5: Modifying original array

const arr = [
    { id: 101, name: "Adesh" },
    { id: 102, name: "Akshay" },
    { id: 103, name: "Amar" },
];


arr.map((curEle, index, array) => (array[index] = { ...curEle, name: 'A'}));
