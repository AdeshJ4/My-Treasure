Note: Both methods modify original array.

sort(): 
======

-> The sort() method is used to sort the elements of an array in place. By default, it converts elements to strings and sorts them in alphabetical order.

ex: 

const fruits = ['banana', 'apple', 'mango', 'cherry'];
fruits.sort();        // Ascending order => ['apple', 'banana', 'cherry', 'mango']


const fruits = ['banana', 'apple', 'mango', 'cherry'];
fruits.sort().reverse();    // Descending order => [ 'mango', 'cherry', 'banana', 'apple' ]





Problem : 
-> Sorting numbers with sort() can lead to incorrect results because numbers are compared as strings
-> To sort numerically, you need to pass a comparison function.

ex: 
const numbers = [10, 2, 30, 1];
numbers.sort(); // Incorrect result: [1, 10, 2, 30] (sorted as strings)

sol: 

const numbers = [10, 2, 30, 1];
numbers.sort((a, b) => a - b); // Ascending order
console.log(numbers); // [1, 2, 10, 30]

const numbers = [10, 2, 30, 1];
numbers.sort((a, b) => b - a); // Descending order
console.log(numbers); // [30, 10, 2, 1]





sort objects of array.


const people = [
    { name: "Alice", age: 30 },
    { name: "Bob", age: 25 },
    { name: "Charlie", age: 35 }
];
  
people.sort((a, b) => a.age - b.age);
  
console.log(people);






import _ from 'lodash';

const people = [
  { name: "Alice", age: 30 },
  { name: "Bob", age: 25 },
  { name: "Alice", age: 22 },
  { name: "Charlie", age: 35 },
  { name: "Bob", age: 28 }
];

const sorted = _.orderBy(people, ['name', 'age'], ['asc', 'desc']);



const people = [
  { name: "Alice", age: 30 },
  { name: "Bob", age: 25 },
  { name: "Alice", age: 22 },
  { name: "Charlie", age: 35 },
  { name: "Bob", age: 28 }
];

people.sort((a, b) => {
  const nameCompare = a.name.localeCompare(b.name);
  if (nameCompare !== 0) return nameCompare; // if names are different
  return a.age - b.age; // if names are same, compare by age
});

console.log(people);





reverse(): 

-> reverse() method does not convert elements into strings. It simply reverses the order of the elements in the array, regardless of the data types of the elements.
