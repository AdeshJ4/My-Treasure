JavaScript Callbacks:
---------------------

-> callbacks are functions that are passed as arguments to other functions and are invoked when an asynchronous 
operation is completed.

-> callbacks handle the result of these asynchronous operations.

-> Callbacks allows a function to call another function

When to Use a Callback ?
------------------------

-> Where callbacks really shine are in asynchronous functions, where one function has to wait for another function 
(like waiting for a file to load).

-> A callback is a function that we are going to call when the result of asynchronous operation is ready.



//real life example

function fetchData(callback) {
  console.log("Fetching data...");
  
  setTimeout(() => {
    const data = { name: "John Doe", age: 30 };
    console.log("Data fetched successfully!");
    callback(data); // Invoking the callback with fetched data
  }, 2000); // Simulating an asynchronous operation
}

function handleData(data) {
  console.log("Processing data:", data);
}

// Call fetchData and pass handleData as a callback function
fetchData(handleData);






Ex 3:
-----

console.log('start');
getUser(101, (user)=>{  // user obj (output of getUser) is passed to getRepositories
    getRepositories(user, (repos)=>{ // repos arr (output of getRepositories) is passed to getRepositories
        getCommits(repos[0], (commits)=>{ // commits arr (output of getCommits) is passed to getRepositories
            console.log(commits);
        })
    })
});
console.log('end');



function getUser(id, callback){
    setTimeout(()=>{
        console.log(`Fetching User from database with id ${id}`);
        callback({id: 101, githubName: 'AdeshJ'});
    }, 2000);
}

function getRepositories({githubName}, callback){
    setTimeout(() => {
        console.log(`Fetching Repos for user ${githubName}`);
        callback(['repo1', 'repo2', 'repo3']);
    }, 2000);
}

function getCommits(repo, callback){
    setTimeout(() => {
        console.log(`Fetching Commits for ${repo}`);
        callback(['commit1', 'commit2', 'commit3'])
    }, 2000);
}



output: 
-------

start
end
Fetching User from database with id 101
Fetching Repos for user AdeshJ
Fetching Commits for repo1
[ 'commit1', 'commit2', 'commit3' ]








Callback Hell / christmas tree problem: 
-------------------------------------

Callback Hell, also known as the "Pyramid of Doom," is a term used to describe a situation where a series of nested callbacks make 
the code difficult to read, understand, and maintain. 
It usually occurs when dealing with asynchronous operations using callbacks, and as the number of nested callbacks increases, 
the code becomes deeply indented and less readable.


getUser(101, (user)=>{  					// asynchronous operation 1
    getRepositories({gitHubUsername}, (repos)=>{		// asynchronous operation 2
        getCommits(repos[0], (commits)=>{				// asynchronous operation 3
            console.log(commits);
        })
    })
});


-> suppose we have function called getUser which is fetching user from database.
-> inside callback function of getUser we are calling getRepositories function.
-> getRepositories function fetching the repos of user.
-> inside callback function of getRepositories we are calling getCommits function.
-> getCommits function fetching the commits of that repo.
-> inside callback function of getCommits we are logging commits of repo.






Named function to rescue
------------------------
function getUser(id, callback) {
  console.log('calling getUser api...');
  setTimeout(() => {
    callback({ id, userName: "Adesh1461" });
  }, [2000]);
}

function getReps(userName, callback) {
  console.log('calling getRepos api...');

  setTimeout(() => {
    callback(["repo1", "repo2", "repo3"])
  }, [2000])
}

function getCommits(repo, callback) {
  console.log('calling api for getCommits...');

  setTimeout(() => {
    callback(["commit1", "commit2", "commit3"])
  }, [2000])
}


getUser(100, handleGetUser);

function handleGetUser(user) {
  console.log(user);
  getReps(user?.userName, handleRepos)
}

function handleRepos(repos) {
  console.log(repos);
  getCommits(repos[0], handleCommits);
}

function handleCommits(commits) {
  console.log(commits);
}

