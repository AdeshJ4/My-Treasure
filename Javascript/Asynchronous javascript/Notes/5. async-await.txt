-> async-await are nothing but syntactically sugar over the promise.
-> "async and await make promises easier to write"
-> async makes a function return a Promise
-> await makes a function wait for a Promise

-> we write 'async' keyword before a function which is going to return promise.
-> The await keyword can only be used inside an async function.
-> The await keyword makes the function pause the execution and wait for a resolved promise before it continues:




fetch data : 
------------

const fetchUsers () {
  return fetch('https://jsonplaceholder.typicode.com/users');
}
fetchUsers()
  .then((res)=>{
    return res.json();
  })
  .then((users)=>{
    log(users)
  })
  .catch((err)=>{
    log(err);
  })
  .finally(()=>{
    log('cleanup process')
  })

using 
const fetchData = async () => {
  try {
    const data = await fetch("https://jsonplaceholder.typicode.com/users");
    const res = await data.json();
    console.log(res);
  } catch (err) {
    console.log(err.message);
  }
};
fetchData();


using async-await:
async function fetchUsers(){
  try{
    const response = await axios.get('https://jsonplaceholder.typicode.com/users');
    log(response.data);
  }catch(err){
    log(err)
  }
}

