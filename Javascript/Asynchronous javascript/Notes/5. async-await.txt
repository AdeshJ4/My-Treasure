-> async-await are nothing but syntactically sugar over the promise.
-> "async and await make promises easier to write"
-> async makes a function return a Promise
-> await makes a function wait for a Promise

-> we write 'async' keyword before a function which is going to return promise.
-> The await keyword can only be used inside an async function.
-> The await keyword makes the function pause the execution and wait for a resolved promise before it continues:




fetch data : 
------------

using pure promises: 
function fetchUsers() {
  return fetch('https://jsonplaceholder.typicode.com/users')
    .then(response => {
      if (!response.ok) {
        throw new Error('Something went wrong');
      }
      return response.json();
    })
    .then(data => {
      console.log(data);
    })
    .catch(err => {
      console.log(err.message);
    });
}
Note: In this version, the try-catch block is removed, and instead, the error handling is done using the .catch() method



now same code with async await : 
const fetchData = async () => {
  try {
    const data = await fetch("https://jsonplaceholder.typicode.com/users");
    const res = await data.json();
    console.log(res);
  } catch (err) {
    console.log(err.message);
  }
};

fetchData();































