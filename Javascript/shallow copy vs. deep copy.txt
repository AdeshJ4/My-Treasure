Shallow Copy and Deep Copy in JavaScript:
=========================================
In JavaScript, there are two ways to copy objects(obj, arr): Shallow copy and Deep copy.


1. Shallow Copy

-> A shallow copy , copies the 'object' and all its properties, but any nested objects or arrays will still reference the same 
memory location as the original object.
->  It means if you make changes to the nested object, it will also affect the original object, as well as the copied object.  

-> Shallow copy is used in both arrays and objects to copy content.
in Object: 
1. spread()
2. Object.assign()

in Arrays: 
1. Spread Operator
2. Slice()
3. concat()


Here's how you can perform a deep copy in JavaScript:

1. using spread operator.
const obj1 = {
  id: 101,
  fname: 'Adesh',
  address : {
    village: 'Lohegaon',
    city: 'Pune'
  },
  hobbies: ["Swimming", "Cricket"],
}
// const obj2 = obj1;  // 1st way of copying object  -> Changes will reflect
const obj2 = {...obj1};  // 2nd way of copying object  -> changes will reflect in all nested objects as well as array
obj2.id = 102;    //  changes will not reflect
obj2.address.city = 'Mumbai';  //  changes will reflect
obj2.address.city = 'Mumbai';  //  changes will reflect
obj2.hobbies.push("Card");  //  changes will reflect
console.log('obj 1: ', obj1);
console.log('obj 2: ', obj2);

2. Using Object.assign()
const obj1 = {
  id: 101,
  fname: "Adesh",
  address: {
    city: "Pune",
    village: "Lohegaon",
  },  
  hobbies: ["Swimming", "Cricket"],
};
const obj2 = Object.assign({}, obj1);
obj2.id = 102;  //-> Changes will reflect
obj2.address.city = "Mumbai";  // -> changes will reflect in all nested objects as well as array
obj2.hobbies.push("Card");  //  changes will reflect
console.log("obj1: ", obj1);
console.log("obj2: ", obj2);

Shallow Copy inside Array


1. Array.slice():
const arr1 = [10, 20, [30, 40]];
consslice();t arr2 = arr1.
arr2[2].push(50);  // changes will reflect
arr2.push(50);  // changes will not reflect
console.log(arr1);
console.log(arr2);

2. Spread Operator: 
const arr1 = [10, 20, [30, 40]];
const arr2 = [...arr1];
arr2[2].push(50);  // changes will reflect
arr2.push(50);  // changes will not reflect
console.log(arr1);
console.log(arr2);

3. concat()
const arr1 = [10, 20, [30, 40]];
const arr2 = arr1.concat();
arr2[2].push(50);  // changes will reflect
arr2.push(50);  // changes will not reflect
console.log("arr1: ", arr1);
console.log("arr2: ", arr2);



2. Deep Copy:

-> A deep copy is a copy that creates a new object with new memory locations for all of its properties and nested objects or arrays.
-> It means that if you make changes to the copied object or any of its nested objects or arrays, it will not affect the original 
object.
-> obj2 will create new Object with same properties as obj1 but with different memory locations. so changes will not reflect.
Here's how you can perform a deep copy in JavaScript:

1. Using Libraries:
Libraries like Lodash provide functions like _.cloneDeep() to facilitate deep copying.
import _ from "lodash";
const obj1 = {
  id: 101,
  fname: "Adesh",
  address: {
    city: "Pune",
    village: "Lohegaon",
  },
};
const obj2 = _.cloneDeep(obj1);
obj2.address.city = "Mumbai";    // changes will not reflect
console.log("obj 1: ", obj1);
console.log("obj 2: ", obj2);


2. Using JSON
const obj1 = {
  id: 101,
  fname: "Adesh",
  address: {
    city: "Pune",
    village: "Lohegaon",
  },
};
const obj2 = JSON.parse(JSON.stringify(obj1));
obj2.id = 102;  // not reflect
obj2.address.city = "Mumbai"; // not reflect
console.log("obj 1: ", obj1);
console.log("obj 2: ", obj2);


3. Using Recursion
function deepCopy(obj) {
    if (typeof obj !== 'object' || obj === null) {
        // If obj is not an object, return it as is
        return obj;
    }
    
    let copiedObj;
    if (Array.isArray(obj)) {
        // If obj is an array, create a new array and recursively deep copy its elements
        copiedObj = [];
        for (let i = 0; i < obj.length; i++) {
            copiedObj[i] = deepCopy(obj[i]);
        }
    } else {
        // If obj is an object, create a new object and recursively deep copy its properties
        copiedObj = {};
        for (let key in obj) {
            if (obj.hasOwnProperty(key)) {
                copiedObj[key] = deepCopy(obj[key]);
            }
        }
    }
    return copiedObj;
}










