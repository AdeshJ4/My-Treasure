Object: 
-------
-> Any entity that has state and behavior is known as an object. For example, a chair, pen, table, keyboard, bike, etc. It can be 
physical or logical.
-> An Object can be defined as an instance of a class. An object contains an address and takes up some space in memory. Objects can 
communicate without knowing the details of each other's data or code. The only necessary thing is the type of message accepted and 
the type of response returned by the objects.
-> Example: A dog is an object because it has states like color, name, breed, etc. as well as behaviors like wagging the tail, 
barking, eating, etc.

Class: 
------
-> Collection of objects is called class. It is a logical entity.
-> A class can also be defined as a blueprint from which you can create an individual object. Class doesn't consume any space.

Inheritance:
------------
-> When one object acquires all the properties and behaviors of a parent object, it is known as inheritance. It provides code 
reusability. It is used to achieve runtime polymorphism.


Polymorphism: 
-------------
-> If one task is performed in different ways, it is known as polymorphism. For example: to convince the customer differently, 
to draw something, for example, shape, triangle, rectangle, etc.
-> In Java, we use method overloading and method overriding to achieve polymorphism.
-> Another example can be to speak something; for example, a cat speaks meow, dog barks woof, etc.

Abstraction: 
-------------
-> Hiding internal details and showing functionality is known as abstraction. For example phone call, we don't know the internal 
processing.
-> In Java, we use abstract class and interface to achieve abstraction.


Encapsulation: 
--------------
-> Binding (or wrapping) code and data together into a single unit are known as encapsulation. 
-> For example, a capsule, it is wrapped with different medicines.
-> A java class is the example of encapsulation. Java bean is the fully encapsulated class because all the data members are private 
here.




Function overloading: 

-> Function overloading is a feature of object-oriented programming where two or more functions can have the same name but different 
parameters 
-> In Function Overloading “Function” name should be the same and the arguments should be different.
-> JavaScript Does not support Function Overloading
-> When you define multiple functions that have the same name, the last one defined will override all the previously defined ones and 
every time when you invoke a function, the last defined one will get executed




method overriding: 

-> If subclass (child class) has the same method as declared in the parent class, it is known as method overriding in Java.
Note: both method must have same name, the same parameters or signature, and the same return type




