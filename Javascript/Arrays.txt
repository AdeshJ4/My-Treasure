-> You can add multiple types of elements inside an array.
-> You can add empty item inside an array. typeof this item is undefined.
eg. arr = [10, true, 'Adesh',  , null, undefined];  



check array is array or not : 

log(Array.isArray(arr));  // true / false


1. Adding Elements: 
-------------------

arr.unshift(10, 20);// add elements at the beginning
arr.push(50, 60);// add elements at the end
arr.splice(3, 0, 'a', 'b');// add elements in between 


arr.unshift({id: 1, name: 'A'});
arr.push( {id: 2, name: 'B'});
arr.splice(1, 0, {id: 3, name: 'C'});

===================================================================================================

2. Finding elements: 
--------------------

1. indexOf()

-> This method return index of element, if element not found then return -1;
-> this methods only works on primitive types and not for comparing objects.
let res = arr.indexOf(10, 2); // find element 10 but start from position 2;
if(res !== -1)
  log('Element Found');
else
  log('Element Not Found');


2. includes()

-> This method return true or false;
-> if you don't provide any value then it will return true. 
-> this methods only works on primitive types and not for comparing objects.


ex.1
if(arr.includes(10))
  log('Element Found');
else
  log('Element Not Found');

ex.2 const res = arr.includes();  // return true


3. find()

-> Returns the first element in an array that satisfies a provided testing function
-> Returns undefined if no element is found.

let res = arr.find((ele)=> {
  return ele > 20;
});  // return element otherwise undefined.

let res = arr.find((eleObj)=>{
  return eleObj.id === 101;
}); // return you object like : {id: 101, name: 'Adesh}

4. findIndex()

-> Returns the index of the first element in an array that satisfies a provided testing function.
-> Returns -1 if no element is found

let res = arr.findIndex((ele)=>{
  return ele > 50;
})  // return you index otherwise -1


5. filter()

-> Creates a new array with all elements that pass the test implemented by the provided function.
-> return you empty array if none of element satisfy the condition.

let res = arr.filter((ele)=>{
  return ele > 10;
}); // return [20,30] otherwise []

let res = arr.filter((eleObj)=>{
  return eleObj.name === 'Adesh';
}) // return [{id: 101, name: 'Adesh'}, {id: 102, name: 'Adesh'}]  otherwise []

===================================================================================================


4. Removing elements: 
--------------------
-> work on both primitive and reference type.

arr.pop();// remove from end
arr.shift();// remove from start
arr.splice(1, 1);  // (index, deleteCount) // remove from in between


===================================================================================================



5. Emptying an Array: 
--------------------

// solution 1
arr = [];  // declare array with let keyword

// solution 2
arr.length = 0;

// solution 3
arr.splice(0);

// solution 4
while(arr.length > 0)
  arr.pop();

// solution 5
for(let i=0; arr.length>0; i++)
  arr.pop()

===================================================================================================


5. Combining and slicing an Array: 
---------------------------------

combining array (primitive type): 

// solution 1 : spread operator
let res1 = [...arr1, ...arr2];

// solution 2 : concat method
let res2 = arr1.concat(arr2);


slicing array: 

arr.slice(0, 3); // does not modify original array.




combining array (reference type): 

-> when you have objects in your array, objects themselves are not copied their references are copied.
-> that means elements in both i/p and o/p arrays will point to same object.
-> when we called concat() method the object from arr1 is not copied to combined array only its refernce coiped.

ex.

let arr1 = [{id: 1}];
let arr2 = [40, 50, 60];

let combined = arr1.concat(arr2);
arr1[0].id = 2;

console.log(combined);




===================================================================================================


5. Iterating an Array: 
---------------------------------

let arr = [10, 20, 30, 40];

arr.forEach((ele, index) => {
  console.log(index, ele);
});

for (let num in arr) console.log(num, arr[num]);

for (let num of arr) console.log(num);



===================================================================================================


6. sorting an Array : 
---------------------

-> The sort() sorts the elements of an array.
-> The sort() overwrites the original array.

-> The reverse() method reverses the order of the elements in an array.
-> The reverse() method overwrites the original array.



let arr1 = [30, 40, 10, 20, 60, 50];
let arr2 = ['C', 'A','B'];
let arr3 = [30, 10, 20, 'z', 'Z', 'a', 'A'];

arr1.sort();    	// [ 10, 20, 30, 40, 50, 60 ]
arr1.reverse();  	// [ 60, 50, 40, 30, 20, 10 ]

arr2.sort(); 		// [ 'A', 'B', 'C' ]
arr2.reverse();	 	// [ 'C', 'B', 'A' ]

arr3.sort();  		// [10,  20,  30,  'A','Z', 'a', 'z']
arr3.reverse();  	// ['z', 'a', 'Z', 'A',  30,  20,  10]

  



10 A a









































