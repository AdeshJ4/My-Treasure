1. Adding Elements: 
-------------------

ex. 1
-----
const arr = [30, 40];

arr.unshift(10, 20);// add elements at the beginning
arr.push(50, 60);// add elements at the end
arr.splice(3, 0, 'a', 'b');// add elements in between 



ex. 2 
------

const arr = [
  {id: 1, name: 'A'},
  {id: 2, name: 'B'}
];

arr.push( {id: 2, name: 'B'});
arr.unshift({id: 1, name: 'A'});
arr.splice(1, 0, {id: 3, name: 'C'});

===================================================================================================

2. Finding elements: 
--------------------

// find the index of element 10
-> arr.indexOf(10);

// find the index of element 10 but start searching from index 3
-> arr.indexOf(10, 3);

//check element exists or not
1. let res = arr.includes(10); // built in method, return true/false
2. let res1 = arr.indexOf(10) !== -1;  // true -> found element  -> logic
3. const res = arr.find((ele) => {  // built in method return value otherwise undefined
  return ele === 30;
});


===================================================================================================

3.  Finding elements (reference type): 
---------------------------------------

-> the "includes()" method to find element exists in array will not work in refeence type.
-> the object we passed as a argument inside includes method to check it exists or not and the object we have in the courses object, theses are two different objects. two objects have different references.
-> so we use find() and findIndex() method.
-> find() method find the element inside the array. if element found then we return value otherwise we retun undefined.
-> findIndex() method is also similer but instead of returning value it returned index of element otherwise it returned -1.


const arr = [
  {id: 101, name: 'Adesh'},
  {id: 102, name: 'Akshay'}
];
const res = arr.find((ele)=>{
  return ele.name === 'Akshay';
})



===================================================================================================



4. Removing elements: 
--------------------

ex.1

const arr = [10, 20, 30, 40, 50];

// remove from end
arr.pop();

// remove from start
arr.shift();

// remove from in between
arr.splice(1, 1);  // (index, deleteCount)



ex.2

const arr = [
  {id: 1, name: 'A'},
  {id: 2, name: 'B'},
  {id: 3, name: 'C'},
]

arr.pop();
arr.shift()
arr.splice(1,1)



===================================================================================================



5. Emptying an Array: 
--------------------

// solution 1
arr = [];  // decalre array with let keyword

// solution 2
arr.length = 0;

// solution 3
arr.splice(0);

// solution 4
while(arr.length > 0)
  arr.pop();


===================================================================================================


5. Combining and slicing an Array: 
---------------------------------

combining array (primitive type): 

// solution 1 : spread operator
let res1 = [...arr1, ...arr2];

// solution 2 : concat method
let res2 = arr1.concat(arr2);


slicing array: 

arr.slice(0, 3); // does not modify original array.




combining array (reference type): 

-> when you have objects in your array, objects themselves are not copied their references are copied.
-> that means elements in both i/p and o/p arrays will point to same object.
-> when we called concat() method the object from arr1 is not copied to combined array only its refernce coiped.

ex.

let arr1 = [{id: 1}];
let arr2 = [40, 50, 60];

let combined = arr1.concat(arr2);
arr1[0].id = 2;

console.log(combined);




===================================================================================================


5. Iterating an Array: 
---------------------------------

let arr = [10, 20, 30, 40];

arr.forEach((ele, index) => {
  console.log(index, ele);
});

for (let num in arr) console.log(num, arr[num]);

for (let num of arr) console.log(num);



===================================================================================================


6. sorting an Array : 
---------------------

-> The sort() sorts the elements of an array.
-> The sort() overwrites the original array.

-> The reverse() method reverses the order of the elements in an array.
-> The reverse() method overwrites the original array.



let arr1 = [30, 40, 10, 20, 60, 50];
let arr2 = ['C', 'A','B'];
let arr3 = [30, 10, 20, 'z', 'Z', 'a', 'A'];

arr1.sort();    	// [ 10, 20, 30, 40, 50, 60 ]
arr1.reverse();  	// [ 60, 50, 40, 30, 20, 10 ]

arr2.sort(); 		// [ 'A', 'B', 'C' ]
arr2.reverse();	 	// [ 'C', 'B', 'A' ]

arr3.sort();  		// [10,  20,  30,  'A','Z', 'a', 'z']
arr3.reverse();  	// ['z', 'a', 'Z', 'A',  30,  20,  10]

  













































