-> A JSON Web Token (JWT) is a JSON object encoded as a long string.
-> We use them to identify users.
-> when the user logs in on the server(our node backend) we generate this JWT Token which is like a license for accessing end points 
of api we give it to the client and then tell them hey next time when you come and called whatever end point you have to show your 
license which is generated by JWT.
-> on the client we need to store this JWT Token so we can sent it back to the server for future api calls.
-> These properties cannot be tampered because doing so requires re-generating the digital signature.
-> the client can be web application or mobile application if its a web application if it is built using react js or angular js you 
can use local storage which is special storage place which is available on every browser.



JWT ex: 



-> https://jwt.io/

we all know that JWT Token have three parts : 
1. Header
2. Payload
3. verify signature 

encoded: 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c

decoded: 

1. HEADER:ALGORITHM & TOKEN TYPE

{
  "alg": "HS256",
  "typ": "JWT"
}

2. PAYLOAD:DATA

{
  "sub": "1234567890",
  "name": "John Doe",
  "iat": 1516239022
}

3. VERIFY SIGNATURE

HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
  
your-256-bit-secret

)

3. verify signature 
-> The third part of jwt is is a digital signature.
-> This digital signature is created based on the content of jwt along with secret key (ACCESS_TOKEN_SECRET_KEY). 
-> The private key or secret key is used to create digital signature. 
-> This secret or private key is only available on the server so if hacker gets the jwt token and modify or add the important 
property such as "isAdmin: true" the digital signature will be invalid because the content of JWT token is modify now we need a new 
signature.
-> But the hacker can not generate this digital signature because they need private key which is only available on the server.
-> on server we store it inside our .env file .
-> server means our node application.
ex.

.env:
-----
ACCESS_TOKEN_SECRET_KEY=SECRETKEYISBEHAPPY







Generating Authentication Tokens: 
---------------------------------

-> to generate JSON Web Tokens we use third party library called : "npm i jsonwebtoken".

// Generating a JWT 
const jwt = require(‘jsonwebtoken’);
const token = jwt.sign({ _id: user._id}, ‘privateKey’)

 Never store private keys and other secrets in your codebase. Store them in 
environment variables. Use the config package to read application settings 
stored in environment variables.  





















