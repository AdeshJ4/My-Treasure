11. What is a Module in Node.js ?
=================================

-> In node every file is a module and the variables and functions defined in it are scoped to that module, they are not accessible outside that module. to make them available we have to export them and they will become public to others.
-> In Node.js, Modules are the blocks of encapsulated code that communicate with an external application based on their related functionality.
-> Modules can be a single file or a collection of multiple files/folders.
-> NPM package can be considered as module.
-> Consider modules to be the same as JavaScript libraries.
-> A set of functions you want to include in your application
-> To load a module, use the require function.

Types of Node Modules: 
----------------------

There are three main types of Node modules that you will work with as a Node.js developer. They include the following.

1. Built-in modules / core module
2. Local modules
3. Third-party modules

1. Built-in modules : 
---------------------

-> Node.js has many built-in modules that are part of the platform and come with Node.js installation. These modules can be loaded into the program by using the required function.
-> examples of built-in Node modules are the following:
http
url
path
fs
os

syntax: 
const module = require('module_name');
const http = require('http');



2. Local modules:
-----------------

-> Local modules are nothing but the files you have created locally in your project like your route files where you define mutiple routes or it can be validateTokenHandler file where you are validating token or it can be errorHandler file where you are handling errors and export it to use in different place.


3. Third-party module: 
----------------------

-> Third-party modules are modules that are available online using the Node Package Manager(NPM). These modules can be installed in the project folder or globally. 
Some of the popular third-party modules are 
Mongoose, 
express, 
angular,
React. 












Built-in modules : 
------------------

1. HTTP Module:
===============

-> In the Node.js HTTP module is a built-in module that allows you to create HTTP servers and make HTTP requests in Node.js. 
-> It provides a set of classes and methods for handling HTTP communications.
-> In http module we have to write multiple if statements for checking multiple urls. To solve this problem we use Express js.

code without using express js and then write same code using express js and explain it : 
========================================================================================

with 'http' : 

const http = require('http');
const server = http.createServer((req, res) => {
  if (req.url === '/') {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('Hello, Node.js!');
  } else if (req.url === '/about') {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('About us');
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

const port = 3000;
server.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});


with "Express.js" : 

const express = require('express');
const app = express();
app.get('/', (req, res) => {
  res.send('Hello, Node.js!');
});
app.get('/about', (req, res) => {
  res.send('About us');
});
const port = 3000;
app.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});





-----------------------------------------------------------------------------------






2. File System Module:
======================

-> file system module allows you to work with the file system on your computer.
-> With File System module you can do following operations :

Read files
Create files
Update files
Delete files
Rename files

const fs = require('fs');

i. Read Files
-> The fs.readFile() method is used to read files on your computer.
// fs.readFile('demofile.txt', 'utf-8', (err, data)=>{
//     if(err){
//         console.error("Error : " , err);
//     }else{
//         console.log(data);
//     }
// })


ii. Create Files
-> The File System module has methods for creating new files:
fs.appendFile()
fs.open()
fs.writeFile()

-> The fs.appendFile() method appends specified content to a file. If the file does not exist, the file will be created:
// ex 1  appendFile()
// fs.appendFile('demofile.txt', "Nice to meet you", ((err)=>{
//     if(err){
//         console.error('Error: ', err);
//     }else{
//         console.log('File Created successfully...');
//     }
// }))


iii] Update Files
-> The File System module hasn two methods for updating files:
	1. fs.appendFile()
	2. fs.writeFile()
The fs.appendFile() method appends the specified content at the end of the specified file:
// fs.appendFile('mynewfile1.txt', ' This is my text.', function (err) {
//   	if (err) throw err;
//  	console.log('Updated!');
//});

-> The fs.writeFile() method replaces the specified file and content:
fs.writeFile('mynewfile3.txt', 'This is my text', function (err) {
  if (err) throw err;
  console.log('Replaced!');
});


iV] Delete Files
-> To delete a file use the fs.unlink() method.
-> The fs.unlink() method deletes the specified file:
// fs.unlink('demofile.txt', (err)=>{
//     if(err) console.log('Error');
//     console.log('File Deleted..');
// })


V] Rename Files:
-> To rename a file use the fs.rename() method.
-> The fs.rename() method renames the specified file:
// fs.rename('newfile.txt', 'updatedFile.txt', (err)=>{
//     if(err) console.log('error');
//     console.log('file renamed....');
// })


vi] list all files from current directory
// fs.readdir('./', (err, data)=>{
//     if(err){
//         console.error("Error: ", err);
//     }else{
//         console.log(data);
//     }
// });





---------------------------------------------------------------------------------------------





3. URL Module:
==============


-> The URL module splits up a web address into readable parts.
-> we use "url.parse()" method and it will parse your web address into readble parts like hostname, pathname, query object.

code: 

ex.1:
var url = require('url');
var adr = 'http://localhost:8080/default.htm?year=2017&month=february';
var q = url.parse(adr, true);
console.log(q.host); //returns 'localhost:8080'
console.log(q.pathname); //returns '/default.htm'
console.log(q.search); //returns '?year=2017&month=february'
var qdata = q.query; //returns an object: { year: 2017, month: 'february' }
console.log(qdata.month); //returns 'february'

ex.2:

Create two html files and save them in the same folder as your node.js files.

summer.html
<!DOCTYPE html>
<html>
<body>
<h1>Summer</h1>
<p>I love the sun!</p>
</body>
</html>

winter.html
<!DOCTYPE html>
<html>
<body>
<h1>Winter</h1>
<p>I love the snow!</p>
</body>
</html>

	
Create a Node.js file that opens the requested file and returns the content to the client. If anything goes wrong, throw a 404 error:

app.js:
var http = require('http');
var url = require('url');
var fs = require('fs');

http.createServer(function (req, res) {
  var q = url.parse(req.url, true);
  var filename = "." + q.pathname;
  fs.readFile(filename, function(err, data) {
    if (err) {
      res.writeHead(404, {'Content-Type': 'text/html'});
      return res.end("404 Not Found");
    } 
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write(data);
    return res.end();
  });
}).listen(8080);

Remember to initiate the file: (Initiate demo_fileserver.js:) C:\Users\Your Name>node demo_fileserver.js

visit following two websites: 
1.http://localhost:8080/summer.html	
2.http://localhost:8080/winter.html







---------------------------------------------------------------------------------------------





4. OS Module:
==============

-> The OS module provides information about the computer's operating system. 

arch()	Returns the operating system CPU architecture
constants	Returns an object containing the operating system's constants for process signals, error cotes etc.
cpus()	Returns an array containing information about the computer's CPUs
endianness()	Returns the endianness of the CPU
EOL	Returns the end-of-line marker for the current operating system
freemem()	Returns the number of free memory of the system
hostname()	Returns the hostname of the operating system
loadavg()	Returns an array containing the load averages, (1, 5, and 15 minutes)
networkInterfaces()	Returns the network interfaces that has a network address
platform()	Returns information about the operating system's platform
release()	Returns information about the operating system's release
tmpdir()	Returns the operating system's default directory for temporary files
totalmem()	Returns the number of total memory of the system
type()	Returns the name of the operating system
uptime()	Returns the uptime of the operating system, in seconds
userInfo()	Returns information about the current user



code : 

var os = require('os');
console.log("Platform: " + os.platform());
console.log("Architecture: " + os.arch());




---------------------------------------------------------------------------------------------------------------------------




5. Path Module: 
===============

-> url : https://www.w3schools.com/nodejs/ref_path.asp

-> The Path module provides a way of working with directories and file paths.



var path = require('path');
var filename = path.basename('/Users/Refsnes/demo_path.js');
console.log(filename);  //demo_path.js


Method	Description
basename()	Returns the last part of a path
delimiter	Returns the delimiter specified for the platform
dirname()	Returns the directories of a path
extname()	Returns the file extension of a path
format()	Formats a path object into a path string
isAbsolute()	Returns true if a path is an absolute path, otherwise false
join()	Joins the specified paths into one
normalize()	Normalizes the specified path
parse()	Formats a path string into a path object
posix	Returns an object containing POSIX specific properties and methods
relative()	Returns the relative path from one specified path to another specified path
resolve()	Resolves the specified paths into an absolute path
sep	Returns the segment separator specified for the platform
win32	Returns an object containing Windows specific properties and methods





--------------------------------------------------------------------------------------------------------------




6. Events Module:
=================

-> The Events module provides a way of working with events.
-> In Node.js, all events are an instance of the EventEmitter object. To be able to access properties and methods of events , create an EventEmitter object.
-> EventEmitter is a class and we have to create its object in order to access all propertirs.
var events = require('events');
var eventEmitter = new events.EventEmitter();
-> Node.js is perfect for event-driven applications
-> Every action on a computer is an event. Like when a connection is made or a file is opened.
-> Event is basically a signal that indicates something has happend in your application.
-> for ex in node we have a class called 'http' which we can use to build the web server. so we listen on a given port and every time we recive a request on that port that http class raises an event. our job is to respond to that event which basically involves reading that request and returning the right respons.
-> if you go through node documentation will see lots of node class/modules raises different kinds of events and in your code you have respond to that evets.
-> Objects in Node.js can fire events, like the readStream object fires events when opening and closing a file:
var fs = require('fs');
var rs = fs.createReadStream('./demofile.txt');
/*Write to the console when the file is opened:*/
rs.on('open', function () {
  console.log('The file is open');
});// o/p -> The file is open
-> Node.js has a built-in module, called "Events", where you can create-, fire-, and listen for- your own events.

-> You can assign event handlers to your own events with the EventEmitter object.
-> In the example below we have created a function that will be executed when a "scream" event is fired.
-> To fire an event, use the emit() method.

code : 

var events = require('events');
var eventEmitter = new events.EventEmitter();
//Create an event handler:
var myEventHandler = function () {
  console.log('I hear a scream!');
}
//Assign the event handler to an event:
eventEmitter.on('scream', myEventHandler);
//Fire the 'scream' event:
eventEmitter.emit('scream');



Method			Description
addListener()		Adds the specified listener
emit()			Call all the listeners(event handlers) registered with the specified name
on()			Adds the specified listener(event handler)






-> Event is basically a signal that indicates something has happend in your application.
-> for ex in node we have a class called 'http' which we can use to build the web server. so we listen on a given port and every time we recive a request on that port that http class raises an event. our job is to respond to that event which basically involves reading that request and returning the right respons.
-> if you go through node documentation will see lots of node class/modules raises different kinds of events and in your code you have respond to that evets.


























