Express: req.params, req.query and req.body:
============================================



1. req.body
-> Generally used in POST/PUT/PATCH requests.
-> Use it when you want to send sensitive data(eg. form data) or super long JSON data to the server.

Before using req.body, make sure your Express app has body parsing enabled:
app.use(express.json()); // Enables JSON body parsing
app.use(express.urlencoded({ extended: true })); // Enables form data parsing

example: 

app.post("/users", async (req, res) => {
    const { name, email, age } = req.body;
    const newUser = await User.create({ name, email, age });
    res.status(201).json(newUser);
});
✅ Usage: POST /users     Body: { "name": "John Doe", "email": "john@example.com", "age": 25 }




=====================================================================================================================================================





2. req.params
-> req.params is used to capture route parameters from the URL. 
-> It's commonly used for fetching, updating, or deleting specific resources based on an ID or other unique identifier.

🔹 1. Fetching a User by ID
app.get("/users/:userId", async (req, res) => {
    const { userId } = req.params;
    const user = await User.findById(userId);
    res.json(user);
});
✅ Usage: GET /users/65a2b7f9e8d5c8a1b2f3c4d5

🚀 Summary of req.params Use Cases

Feature                 | Example URL
------------------------|---------------------------------------------------
Get user by ID          | /users/:userId                  → /users/12345
Update product          | /products/:productId            → /products/98765
Delete order            | /orders/:orderId                → /orders/54321
Get posts by category   | /posts/category/:categoryName   → /posts/category/tech
Multiple Params         | /users/:userId/orders/:orderId  → /users/12345/orders/67890



=====================================================================================================================================================

3. req.query
req.query is mostly used for searching, sorting, filtering, pagination, etc.


1️⃣. Searching
🔹 Example: Search for users by name (case-insensitive).
app.get("/users", async (req, res) => {
    const { name } = req.query;
    const query = name ? { name: { $regex: name, $options: "i" } } : {};
    
    const users = await User.find(query);
    res.json(users);
});
✅ Usage: GET /users?name=john
Users in Database:
[
    { "name": "Adesh Kumar" },
    { "name": "adesh sharma" },
    { "name": "ADELAIDE" },
    { "name": "Radha Adeshwari" },
    { "name": "Suresh" }
]
### **What Happens When You Search?**  

| 🔍 Search Query (`?name=...`) | 🔎 Matching Users |
|------------------------------|------------------|
| `/users?name=Adesh`          | ✅ Adesh Kumar, adesh sharma, Radha Adeshwari |
| `/users?name=adesh`          | ✅ Same as above (case-insensitive) |
| `/users?name=sharma`         | ✅ adesh sharma |
| `/users?name=ADEL`           | ✅ ADELAIDE |
| `/users?name=suresh`         | ✅ Suresh |
| `/users?name=xyz`            | ❌ No matches |  





2️⃣. Sorting:
🔹 Example: Sort products by price (ascending or descending).
app.get("/products", async (req, res) => {
    const { sortBy } = req.query;
    const sortOption = sortBy === "desc" ? { price: -1 } : { price: 1 };

    const products = await Product.find().sort(sortOption);
    res.json(products);
});
✅ Usage: GET /products?sortBy=desc  // Sorts by price descending


3️⃣. Filtering:
🔹 Example: Filter books by category and price range.
app.get("/books", async (req, res) => {
    const { category, minPrice, maxPrice } = req.query;

    let filter = {};
    if (category) filter.category = category;
    if (minPrice || maxPrice) {
        filter.price = {};
        if (minPrice) filter.price.$gte = parseFloat(minPrice);
        if (maxPrice) filter.price.$lte = parseFloat(maxPrice);
    }

    const books = await Book.find(filter);   // filter: { category: 'fiction', price: { '$gte': 10, '$lte': 20 } }
    res.json(books);
});
✅ Usage: GET /books?category=fiction&minPrice=10&maxPrice=50


4️⃣. Pagination
Example: Implement pagination with page and limit.
app.get("/movies", async (req, res) => {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;

    const movies = await Movie.find().skip(skip).limit(limit);
    res.json(movies);
});

✅ Usage:
GET /movies?page=2&limit=5  // Gets page 2 with 5 movies per page



### 🚀 Summary

Feature       | Example Query
-------------|--------------------------------------------------------------------------------------------------------------
Searching    | /users?name=john
Sorting      | /products?sortBy=desc
Filtering    | /books?category=fiction&minPrice=10&maxPrice=50
Pagination   | /movies?page=2&limit=5
Combined     | /products?search=laptop&category=electronics&minPrice=500&maxPrice=2000&sort=asc&page=2&limit=5






=====================================================================================================================================================



















