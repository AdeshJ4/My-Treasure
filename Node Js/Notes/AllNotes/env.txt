what is .env file in node js
----------------------------
-> A .env file (short for "environment file") is a plain text file used to store configuration settings, sensitive information, and environment variables, API Keys, 
database credentials for an application
-> These variables are typically used to configure the application's behavior based on the environment it is running in (e.g., development, testing, production).

A .env file contains key-value pairs, where each line represents a variable.
example:
DATABASE_URL=mongodb+srv://username:password@cluster0.mongodb.net/mydb
API_KEY=your_api_key_here
DEBUG=true
PORT=3000
SECRET_KEY=your_secret_key_here



step 1: Create a file named .env in the root directory of your project.
step 2: Add key-value pairs for your configuration settings
step 3: Use a library or tool to load the variables into your application. For example:
To use the values in the .env file in a Node.js application, we need to install the dotenv package, which is a zero-dependency module that loads environment variables 
from a .env file into process.env.
$npm i dotenv
code: 
server.js
---------
require('dotenv').config()
const express = require('express')
const app = express()
const dbUrl = process.env.DATABASE_URL
const apiKey = process.env.API_KEY
// Use the values in the application





Best Practices for Using .env Files: 

1. Do Not Commit to Version Control:
Add .env to your .gitignore file to prevent it from being committed to your repository. This avoids exposing sensitive information.

2. Use Different .env Files for Different Environments:
Create separate .env files for development, testing, and production (e.g., .env.development, .env.production).

3. Keep Sensitive Data Secure:
Avoid hardcoding sensitive information in your code. Always use environment variables.

4. Validate Variables:
Ensure required variables are present and valid when the application starts.

5. Use Default Values:
Provide default values for non-sensitive variables to avoid errors if the .env file is missing.



process: 

-> In Node.js, process is a global object that provides information and control over the current running Node.js process.
console.log(global.process);

Think of it as a "manager" that lets you:

Get environment details (like OS, Node.js version, etc.)
Access command-line arguments (when running scripts)
Control execution (exit the program, handle errors, etc.)
Listen for events (e.g., when the program is about to exit)

1️⃣ process.env – Access Environment Variables:

process.env stores environment variables, which are useful for setting API keys, database credentials, and configurations.

Example: Access an Environment Variable
---
console.log(process.env.NODE_ENV); // 'development' or 'production'
console.log(process.env.PORT); // Custom port if set
---
💡 Tip: You can set environment variables when running a script:
---
terminal> $env:ACCESS_CITY="pune"; node .\server.js   => poweshell cmd
---


2️⃣ process.argv – Command-Line Arguments: 
This stores arguments passed when running a Node.js script.

Example: Read CLI Arguments
---
console.log(process.argv);
Run this script as:
---
node app.js hello world
---

Output:
[
  '/usr/local/bin/node', // Path to Node.js
  '/path/to/app.js', // Path to script
  'hello',
  'world'
]

💡 process.argv[2] gives "hello", and process.argv[3] gives "world".



3️⃣ process.exit() – Stop Execution
You can manually exit a Node.js program using process.exit(), which stops execution immediately. it basically terminate the current Node.js process.
It stops the execution of the program immediately and exits the process with a specified exit code
It forcefully terminates the Node.js process, stopping all pending operations, timers, and I/O operations
It accepts an optional exit code as an argument. By default, the exit code is 0.

Syntax: 
---
process.exit([code]);
---
code (optional): The exit code. Defaults to 0.
0:  Indicates a successful termination (default).
Non-zero values (e.g., 1, 2, etc.) indicate an error or abnormal termination./ Uncaught fatal exception.
Other non-zero codes: Custom error codes (you can define your own meanings).

Common Exit Codes
Exit Code	Meaning
0	        Success
1	        Uncaught fatal exception
2	        Misuse of shell builtins
3	        Internal JavaScript error
126	        Command invoked cannot execute
128	        Invalid exit argument



4️⃣ process.cwd() – Get Current Working Directory
Returns the directory where the script is running.

---
console.log(process.cwd()); // Example: C:\Users\user\Desktop\Movify\server
---


5️⃣ process.memoryUsage() – Check Memory Usage
Returns memory usage details in bytes.
---
console.log(process.memoryUsage());
---
output:
{
  "rss": 23456789,
  "heapTotal": 9876543,
  "heapUsed": 8765432,
  "external": 1234567
}


6️⃣ process.nextTick() – Run a Function on Next Event Loop
This schedules a function to run after the current operation completes, before any I/O operations.
---
console.log("Before");
process.nextTick(() => {
  console.log("Inside nextTick");
});
setTimeout(() => {
    console.log('setTimeout oy');
}, 0)
console.log("After");
---
💡 process.nextTick() runs before setTimeout(() => {}, 0)!


7️⃣ Listening to Events
process.on() – Handle Events
You can listen for process events like exit, error, etc..
---
process.on("exit", (code) => {
  console.log(`Process is exiting with code ${code}`);
});

process.exit(0);
---

It will log:
Process is exiting with code 0






