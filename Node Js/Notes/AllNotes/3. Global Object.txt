-> Variables declared outside of any function or block are attached to the global object.

"process" is a global object in Node.js, just like "window" is a global object in the browser


window object: 

-> In a browser we have this "window" object that represent our global scope.
-> So all the variables and functions that defined globally we can access them via this window object.
-> In the client side javascript which we run inside a browser, when we declare a variable or functions that is added to global scope means inside a window object and we can access them by window.variableName or window.functionName.
-> But there is problem with this approach. 
-> the problem with this approach is that if we have same variableName, functionName as in the window object then we can easily override the the variables, functions in genereal properties of window object which is not good.
-> so we have to stop using var keyword inside client side js which executes inside a browser.



global object: 

-> We don‚Äôt have the window object in Node.
-> The global object in Node is ‚Äúglobal‚Äù. 
-> Unlike browser applications, variables we define are not added to the ‚Äúglobal‚Äù object.
-> In node we don't have this "window" object instead we have "global" object.
-> so we can do like : global.console.log() or global.setTimeout()
-> variables and functions which we define in a file like app.js they are not added to a global object.
They are only scoped to this file (app.js) so they are not available outside this app.js file.
and this is because node module system.



### **Detailed Comparison: `process` (Node.js) vs `window` (Browser)**  

| Feature                              | `process` (Node.js) üåç                                                      | `window` (Browser) üåê                                                      |
| ------------------------------------ | ---------------------------------------------------------------------------  | -------------------------------------------------------------------------- |
| **Scope**                            | Runs in **Node.js** (server-side).                                           | Runs in the **browser** (client-side).                                     |
| **Purpose**                          | Manages the **environment**, system info, and processes.                     | Handles **DOM, events, and browser APIs**.                                 |
| **Global Object?**                   | ‚úÖ Yes, available everywhere in Node.js.                                     | ‚úÖ Yes, available everywhere in the browser.                                |
| **Access to Environment Variables?** | ‚úÖ Yes, through `process.env`.                                               | ‚ùå No direct access to system environment variables.                        |
| **Access to DOM?**                   | ‚ùå No, since Node.js runs outside the browser.                               | ‚úÖ Yes, can manipulate the DOM (`document.querySelector()`).                |
| **Example Usage**                    | `process.env.PORT`, `process.cwd()`                                          | `window.location.href`, `window.alert()`.                                  |
| **Runs in JS Console?**              | ‚úÖ Yes, in Node.js terminal.                                                 | ‚úÖ Yes, in browser DevTools console.                                        |
| **Handles System Info?**             | ‚úÖ Yes, can access OS details (`process.platform`, `process.memoryUsage()`). | ‚ùå No, only browser-related info (`navigator.userAgent`).                   |
| **Handles Asynchronous Events?**     | ‚úÖ Yes, used in event-driven programming (`process.on('exit', callback)`).   | ‚úÖ Yes, handles user events (`window.addEventListener('click', callback)`). |
| **File System Access?**              | ‚úÖ Yes, via `fs` module (`fs.readFileSync()`).                               | ‚ùå No, can't directly access local files (except `<input type="file">`).    |
| **Security Considerations**          | Needs to be protected (`.env` file should not be exposed).                   | Can be accessed by any script running on the page.                         |



### **Key Takeaways to Remember**
- **`process` is for the server (Node.js)** üöÄ ‚Äì Deals with system-level tasks.  
- **`window` is for the browser** üåê ‚Äì Deals with UI and user interactions.  
- **`process.env` is used for environment variables**, while **`window` is used for browser-related tasks** (DOM, location, alerts).  

Would you like some **mnemonics or memory tricks** to remember this better? üòÉ





