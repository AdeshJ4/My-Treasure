-> Express.js is a popular 'web framework' for Node.js.
-> Express is commonly used for 'building RESTful APIs'. 
-> express support 'middleware system', support various 'template engines' as will as provide 'flexible and modular structure' for 
building 'RESTful APIs' also it have 'Active Maintenance & Active Community'. 
-> we used express over the http module because, In http module we have to used method called 'createServer()' fro crating a server.
Inside this method we have to write multiple if statements for checking multiple urls.
This make code messy as well as hard to understand, hard to maintain and hard to debug. 
To solve this problem we use Express js.
-> also there are other reasons such as : 


The meaning of this lines:
const express = require("express");
const app = express();

-> we import express module with the help of require() function.
-> The 2nd line creates an 'instance' of the Express application by calling the express function. 
The app variable now represents your Express application. 
This instance of app is where you'll define your routes, middleware, and other configurations for handling HTTP requests and 
building your web application.



for more reference: 

2. Templating: 
Express.js supports a variety of templating engines, such as 'EJS', Handlebars, and pug, which allow developers to generate 'dynamic
HTML pages' and 'views' for their applications.

1. Flexibility for APIs & Routing: 
-> Express.js provides a flexible and modular structure for building RESTful APIs.
-> Express.js provides a simple routing system for defining endpoints and handling HTTP requests.
-> It supports various HTTP methods (GET, POST, PUT, DELETE, etc.) and allows you to create modular route handlers.

5.Active Maintenance & Active Community:
Express is actively maintained, and updates are released regularly. 
Express has a large and active community







code without using express js and then write same code using express js and explain it : 
========================================================================================

with 'http' : 
-------------
const http = require('http');
const server = http.createServer((req, res) => {
  if (req.url === '/') {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('Hello, Node.js!');
  } else if (req.url === '/about') {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('About us');
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

const port = 3000;
server.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});




with "Express.js" : 
-------------------
const express = require('express');
const app = express();
app.get('/', (req, res) => {
  res.send('Hello, Node.js!');
});
app.get('/about', (req, res) => {
  res.send('About us');
});
const port = 3000;
app.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});












more advance example: 
---------------------



const express = require("express");
const app = express();

const courses = [
  { id: 101, name: "React Js" },
  { id: 102, name: "Node Js" },
  { id: 103, name: "Express Js" },
  { id: 104, name: "Mongodb" },
];

app.use(express.json());

app.get("/", (req, res) => {
  return res.status(200).send("All ABout Courses");
});

app.get("/api/courses", (req, res) => {
  return res.status(200).json(courses);
});

app.get("/api/courses/:id", (req, res) => {
  const course = courses.find((course) => {
    return course.id === parseInt(req.params.id);
  });
  if (!course) return res.status(404).send("Not Found");
  return res.status(200).send(course);
});

app.post("/api/courses", (req, res) => {
  if (!req.body.name || req.body.name.length <= 3)
    return res.status(400).send("Invalid Data");
  const course = {
    id: courses.length + 1,
    name: req.body.name,
  };
  courses.push(course);
  return res.status(201).send(course);
});

app.put("/api/courses/:id", (req, res) => {
  const course = courses.find((course) => {
    return course.id === parseInt(req.params.id);
  });
  if (!course) return res.status(404).send("Not Found");
  if (!req.body.name || req.body.length <= 3)
    return res.status(400).send("Bad Request");

  course.name = req.body.name;

  return res.status(200).json(course);
});

app.delete("/api/courses/:id", (req, res) => {
  const course = courses.find((course) => {
    return course.id === parseInt(req.params.id);
  });
  if (!course) return res.status(400).send("Not Found");

  const index = courses.indexOf(course);
  courses.splice(index, 1);
  return res.status(200).send("Deleted Successfully");
});


// define multiple route parameters
app.get('/api/users/:id/:fname', (req, res, next)=>{
  // http://localhost:5000/api/users/101/Adesh?age=23&&lname=Jadhav
  console.log('req.params: ', req.params);  // required parameters=> { id: '101', fname: 'Adesh' }
  console.log('req.url: ', req.url);  //  url =>  /api/users/101/Adesh
  console.log('req.query: ', req.query); // additional Information to backend => { age: '23', lname: 'Jadhav' }
  next();
});

app.get("*", (req, res) => {
  res.status(400).send("Invalid Url");
});

app.listen(5000, () => {
  console.log(`Server listening on port 5000`);
});




Types of parameters: 

1. 'query string parameter' 
-> These are the 'parameters' that we add in the url 'after question mark'. 
-> we use 'query string parameter' to provide 'additional data' to 'backend services'.
-> if you don't provide then 'they will not give error'.
-> in bellow example we have 'sortBy' as a query string parameter.
-> you can access them like : log(req.query) => {sortBy: "name"};
eg> http://localhost:5000/api/posts/2001/06?sortBy=name
app.get('/api/users/:id/:fname', (req, res, next)=>{
  console.log('req.query: ', req.query); // additional Information to backend => {sortBy: "name"}
  next();
});

2. 'required parameters' 
-> These are 'required parameters', if you don't provide then it will give you error.
http://localhost:5000/api/users/101/Adesh
app.get('/api/users/:id/:fname', (req, res, next)=>{
  console.log('req.params: ', req.params);  // required parameters=> { id: '101', fname: 'Adesh' }
  next();
});


















