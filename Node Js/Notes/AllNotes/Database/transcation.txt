-> Transactions in MongoDB: Complete Walkthrough: https://youtu.be/ErszXERETr0?si=yUvApvl-KScQjKVi


code : 

router.post("/", async (req, res) => {
  try {
    const movie = await Movie.findById(req.body.movieId);
    if (!movie) return res.status(404).send("Movie Not Found");

    if (movie.numberInStock === 0)
      return res.status(400).send("Movie Not in stock");

    const rental = await Rental.create({   		 // operation 1 -> create document
      movie: {
        _id: movie._id,
        dailyRentalRate: movie.dailyRentalRate,
      }
    });

    movie.numberInStock--;
    await movie.save();					// operation 2 -> save movie document

    res.status(200).send(rental);
  } catch (err) {
    res.status(500).send(err.message);
  }
});




-> In above code we two separate operations : 
operation 1 -> create document
operation 2 -> save movie document

-> It is possible after we executed 1st operation something may goes wrong. may be our server crashes or connection to mongoDB drop.
-> then 2nd operation will not complete.
-> thats where we need transaction.
-> so with transcation we insure that the both operations wil update the state of our data in the database or none of the will update/applied. so they are atomic. they both completes they both rollback.
-> In lots of relational databases we have this concept of transaction but in mongoDB we don't have really transaction.
-> There is technique called two phase commit which is advanced topic related to mongoDB.
-> But there is npm package that simulates transaction in mongoose.




-> In some relational databases like mySQL, SqlServer we have this concept transactions which meanse group of operations that should be performed as unit. so either all these operations will complete and changed the state of the database or if something fails all these operations which has been applied will rollback and our databse will go back in initial state

-> So in mongoDB we don't have concept of transaction as like we have in relational databses.
-> we have a technique called "Two phase commit" 

-> we use library that gives us the concept of transaction but internally it implements transaction using two phase commit technique.
-> 
































































