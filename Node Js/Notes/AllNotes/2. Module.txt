11. What is a Module in Node.js ?
=================================

-> Modules can be a 'single file' or a 'collection of multiple files/folders' .
-> In other words, Modules are the 'blocks of encapsulated code' that communicate with an external application based on their related 
functionality.
-> NPM package can be considered as module. like nodemon, helmet, mongoose, express
-> To load a module, use the 'require()' function.

Types of Node Modules: 
----------------------
There are three main types of Node modules that you will work with as a Node.js developer. They include the following.

1. Built-in modules / core module
2. Local modules
3. Third-party modules

1. Built-in modules : 
---------------------
-> Node.js has many built-in modules that come with Node.js installation. These modules can be loaded into the program by using the 
required function.
-> examples of built-in Node modules are the following:
1. http
2. os
3. fs
4. url
5. path
6. Events Module
7. https
8. querystring
10. crypto

syntax: 
const module = require('module_name');
const http = require('http');



2. Local modules:
-----------------

-> Local modules are nothing but the files you have created locally in your project like our route files where you define multiple 
routes or it can be validateTokenHandler file where you are validating token or it can be errorHandler file where you are handling 
errors and export it to use in different place.


3. Third-party module: 
----------------------

-> Third-party modules are modules which we download from the NPM registry. 
-> NPM package can be considered as module. like nodemon, helmet, mongoose, express
-> These modules can be installed in the project folder or globally. 
-> Some of the popular third-party modules are 
Mongoose, 
express, 
angular,
React. 












Built-in modules : 
------------------

1. HTTP Module:
===============

-> HTTP module is use for 'building Networking application'.
-> http module is built on top of 'TCP' (Transmission Control Protocol). 
-> with the help of http module we can easily create 'HTTP server' that can listen for incoming requests, handle those requests, and 
send back responses on a given port and with this we can easily create a 'backend server' for our client application.
-> for creating 'http server' we use 'http.createServer()' method which creates an instance of 'http.Server'. 
This method takes a callback function that will be invoked for each incoming HTTP request. 
-> http.createServer() is implemented inside 'http.Server' class and this http.Server class is provided by http module. 
-> When you create an HTTP server using the http module, it uses the lower-level 'net module' which creates 'TCP Server' to handle 
'TCP connections'.
-> 'net.Server' class is used to create a 'TCP server'. 
-> The 'http.Server' class inherits from 'net.Server' class which is part of the core 'net module'. 
-> 'net.Server' is EventEmitter.
-> In http module we have to write multiple if statements for checking multiple urls. To solve this problem we use Express js.



code without using express js and then write same code using express js and explain it : 
========================================================================================

with 'http' : 

const http = require('http');
// server here is eventEmitter. it has all the capabilities of eventEmitter like server.on() or server.emit() or server.addListener()
const server = http.createServer((req, res) => {   
  if (req.url === '/') {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('Hello, Node.js!');
  } else if (req.url === '/about') {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('About us');
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

const port = 3000;
server.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});


with "Express.js" : 

const express = require('express');
const app = express();
app.get('/', (req, res) => {
  res.send('Hello, Node.js!');
});
app.get('/about', (req, res) => {
  res.send('About us');
});
const port = 3000;
app.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});


with net module: 

const net = require('net');
const server = net.createServer((socket) => {
  console.log('Client connected');
  // Listen for data from the client
  socket.on('data', (data) => {
    console.log(`Received data from client: ${data}`);
    // Send a response back to the client
    socket.write('Hello from server!');
  });
  // Listen for the client to end the connection
  socket.on('end', () => {
    console.log('Client disconnected');
  });
});

const PORT = 3000;

// Start the server and listen on the specified port
server.listen(PORT, () => {
  console.log(`Server listening on port ${PORT}`);
});





-----------------------------------------------------------------------------------


2. https Module:
================
Similar to the http module but used for secure communication via HTTPS.
Requires SSL certificates to function.

Example:
```
const https = require('https');
https.get('https://jsonplaceholder.typicode.com/todos/1', (res) => {
  let data = '';
  res.on('data', (chunk) => (data += chunk));
  res.on('end', () => console.log(JSON.parse(data)));
});
```



-----------------------------------------------------------------------------------






2. fs (File System) Module:
==========================

-> file system module allows you to work with the file system on your computer.
-> With File System module you can do following operations :

Read files
Create files
Update files
Delete files
Rename files

1. readFile()
2. appendFile()
3. writeFile()
4. rename()
5. unlink()
6. readdir()


const fs = require('fs');

i. Read Files : file must be present if not then it will give you error
-> The fs.readFile() method is used to read files on your computer.
// fs.readFile('demofile.txt', 'utf-8', (err, data)=>{
//     if(err){
//         console.error("Error : " , err);
//     }else{
//         console.log(data);
//     }
// })


ii. Create Files
-> The File System module has methods for creating new files:
fs.appendFile()
fs.writeFile()

-> The fs.appendFile() method appends specified content to a file. If the file does not exist, the file will be created:
// ex 1  appendFile()
// fs.appendFile('demofile.txt', "Nice to meet you", ((err)=>{
//     if(err){
//         console.error('Error: ', err);
//     }else{
//         console.log('File Created successfully...');
//     }
// }))


iii. Update Files
-> The File System module has two methods for updating files:
	1. fs.appendFile()
	2. fs.writeFile()
The fs.appendFile() method appends the specified content at the end of the specified file:
// fs.appendFile('mynewfile1.txt', ' This is my text.', function (err) {
//   	if (err) throw err;
//  	console.log('Updated!');
//});

-> The fs.writeFile() method replaces the specified file and content:
-> it replaces old text with new text.
fs.writeFile('mynewfile3.txt', 'This is my text', function (err) {
  if (err) throw err;
  console.log('Replaced!');
});


iV. Delete Files
-> To delete a file use the fs.unlink() method.
-> The fs.unlink() method deletes the specified file:
// fs.unlink('demofile.txt', (err)=>{
//     if(err) console.log('Error');
//     console.log('File Deleted..');
// })


V. Rename Files:
-> To rename a file use the fs.rename() method.
-> The fs.rename() method renames the specified file:
// fs.rename('newfile.txt', 'updatedFile.txt', (err)=>{
//     if(err) console.log('error');
//     console.log('file renamed....');
// })


vi. list all files from current directory
// fs.readdir('./', (err, data)=>{
//     if(err){
//         console.error("Error: ", err);
//     }else{
//         console.log(data);
//     }
// });





---------------------------------------------------------------------------------------------





3. URL Module:
==============

-> The URL module splits up a 'web address' into 'readable parts'.
-> we use "url.parse()" method and it will parse your web address into readable parts like hostname, pathname, query object.

code: 

ex.1:
var url = require('url');
var adr = 'http://localhost:8080/default.htm?year=2017&month=february';
var q = url.parse(adr, true);
console.log(q.host); //returns 'localhost:8080'
console.log(q.pathname); //returns '/default.htm'
console.log(q.search); //returns 
var qdata = q.query; //returns an object: { year: 2017, month: 'february' }
console.log(qdata.month); //returns 'february'

ex.2:

Create two html files and save them in the same folder as your node.js files.

summer.html
<!DOCTYPE html>
<html>
<body>
<h1>Summer</h1>
<p>I love the sun!</p>
</body>
</html>

winter.html
<!DOCTYPE html>
<html>
<body>
<h1>Winter</h1>
<p>I love the snow!</p>
</body>
</html>

	
Create a Node.js file that opens the requested file and returns the content to the client. If anything goes wrong, throw a 404 error:

app.js:
var http = require('http');
var url = require('url');
var fs = require('fs');

http.createServer(function (req, res) {
  var q = url.parse(req.url, true);
  var filename = "." + q.pathname;
  fs.readFile(filename, function(err, data) {
    if (err) {
      res.writeHead(404, {'Content-Type': 'text/html'});
      return res.end("404 Not Found");
    } 
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write(data);
    return res.end();
  });
}).listen(8080);

visit following two websites: 
1.http://localhost:8080/summer.html	
2.http://localhost:8080/winter.html
Remember to initiate the file: (Initiate demo_fileserver.js:) C:\Users\Your Name>node demo_fileserver.js








---------------------------------------------------------------------------------------------





4. OS Module:
==============

-> The OS module provides information about the computer's operating system. 

type()	                  Returns the name of the operating system
userInfo()	              Returns information about the current user
hostname()	              Returns the hostname of the operating system
arch()	                  Returns the operating system CPU architecture
cpus()	                  Returns an array containing information about the computer's CPUs
freemem()	                Returns the number of free memory of the system
totalmem()	              Returns the number of total memory of the system
uptime()	                Returns the uptime of the operating system, in seconds
platform()	              Returns information about the operating system's platform



code : 

var os = require('os');
console.log("Platform: " + os.platform());
console.log("Architecture: " + os.arch());




---------------------------------------------------------------------------------------------------------------------------




5. Path Module: 
===============

-> Provides utilities for working with paths of file and directory .
-> Helps handle platform-specific path issues (Windows uses \, while Linux/macOS uses /).

syntax:
var path = require('path');

Method	                   Description

basename()	               Returns the last part of a path
dirname()	                 Returns the directories of a path
join()	                   Joins the specified paths into one
normalize()	               Normalizes the specified path

example: 

const path = require('path');

const filePath = 'E:/z Placement/Mosh/Node Js/13 Integration Testing';
const messyPath = '/path/to/../files/example.txt'

const directory = path.dirname(filePath); //E:/z Placement/Mosh/Node Js
const fileName = path.basename(filePath); //13 Integration Testing
const fullPath = path.join(__dirname, 'files', 'example.txt'); // E:\z Placement\Node\2. Node Projects\useMe\files\example.txt
const cleanPath = path.normalize(messyPath); // \path\files\example.txt


--------------------------------------------------------------------------------------------------------------




6. Events Module:
=================

👉 Events is core module.
👉 The 'Events module' provides a way of 'working with events'.
👉 Used to "create" and "handle" "custom events".
👉 Implements an "event-driven architecture"
👉 It allows developers to emit (trigger) and listen (handle) for custom events.
👉 Event is basically a 'signal' that indicates something has happened in your application and you have to handle that event. 
Like when a connection is made or a file is opened. Every action on a computer is an event. 
👉 lots of node class/modules raises different kinds of events and in your code you have respond to that events.


EventEmitter class: 

👉 "EventEmitter" is "class" provided by the "events module".
👉 we create "Instances" of "EventEmitter class" 
👉 Many built-in Node.js modules (like http, fs, net) inherit from EventEmitter, making them event-driven.
allows us to:
🟠  Define (listen for) events using .on() or .addListener().
🟠  Emit (trigger) events using .emit().
🟠  Remove event listeners(callback fucntion) using .off() or .removeListener().

👉 It follows the "Publisher-Subscriber model", where:

🟠 The publisher (emitter) generates events.
🟠 The subscriber (listener) waits for and responds to those events.


Example 1: Creating & Handling Events with EventEmitter
```
const EventEmitter = require('events'); 

// Create an instance of EventEmitter
const eventEmitter = new EventEmitter();

// Define an event listener
eventEmitter.on('greet', (name) => {   // callback function is called "event listener"
    console.log(`Hello, ${name}!`);
});

// Emit (trigger) the event
eventEmitter.emit('greet', 'John');

```

Example 2: Handling Multiple Listeners for the Same Event
```
const EventEmitter = require('events');
const eventEmitter = new EventEmitter();

eventEmitter.on('order', () => console.log('Order received.'));
eventEmitter.on('order', () => console.log('Processing payment...'));
eventEmitter.on('order', () => console.log('Order shipped.'));

eventEmitter.emit('order');

```

Example 3: Removing Event Listeners (callback function)
```
const EventEmitter = require('events');
const eventEmitter = new EventEmitter();

const eventListener = (name) => {
  console.log(`Welcom ${name}`)
};

eventEmitter.on("greet", eventListener)

eventEmitter.emit("greet", 'Adesh');

eventEmitter.off("greet",eventListener )
```

Example 4: Emitting Events Only Once with .once()
```
const EventEmitter = require('events');
const eventEmitter = new EventEmitter();

eventEmitter.once('connect', () => {
    console.log('Connected to the server.');
});

eventEmitter.emit('connect');  // ✅ Will execute
eventEmitter.emit('connect');  // ❌ Will NOT execute again
```


🟠 Inheriting from EventEmitter (Custom EventEmitter Class): 

👉 Many built-in Node.js modules (like http, fs, net) inherit from EventEmitter, making them event-driven.
👉 In bellow ex we created a "custom class" that extends EventEmitter. This allows us to create our own event-driven objects.

```
const EventEmitter = require('events');  // Import the EventEmitter module

// Create a class that inherits from EventEmitter
class MyEmitter extends EventEmitter {}  // ✅ Custom class extending EventEmitter

const myEmitter = new MyEmitter();  // ✅ Create an instance of MyEmitter

// Attach an event listener
myEmitter.on('alert', (msg) => {
    console.log(`ALERT: ${msg}`);
});

// Emit the 'alert' event
myEmitter.emit('alert', 'Low disk space!');

--------------------------------------------------------------------------------------------------------------



7. querystring:
===============

Parses and formats URL query strings.

Example:
```
const querystring = require('querystring');
const parsed = querystring.parse('name=John&age=25');
console.log(parsed); // { name: 'John', age: '25' }
```

--------------------------------------------------------------------------------------------------------------


8. crypto
=========
Provides cryptographic functionalities like hashing, encryption, and decryption.

Example:
```
const crypto = require('crypto');
const hash = crypto.createHash('sha256').update('Hello').digest('hex');
console.log(hash);
```








