2. Using Embedded Documents (DeNormalization)

-> There is another approach instead of having differnet collection for storing authors we can embedded an author document inside a course document.
-> so basically we are embedding one document inside another document. and this we called denormalization.

ex: 

let course = {
	courseName: 'Node js',
	author: {
		name: 'Mosh'
		contact: '9527370288'
	}
}



1st approach advantage and disadvantages
-> In 1st approach we have single place to define a author which is inside a author collection. if tomarrow i decided to change name of author from 'A' to 'B' there is single place that i need to modify. and all courses which are referencing that author will see updated author.
-> so in 1st approach we have consistency 
-> However when we query a course document we need to do extra query to load related author from author collection. 

2nd approach advantage and disadvantages
-> in this approach we can easily load course document with author document withount extra query to author collection because author is inside acourse document.
-> However with this approach tomarrow we have decide to change the name of author from 'A' to 'B', chances are their are multiple course documents that need to updated and if our update operation doen't complete successfully it is possible that we have some documents which are not updated. so will end up with unconsistent data.

Summary : 
-> 1st approach gives us consistency 
-> 2nd approach gives us performance
-> Each approach have strenght and wicknesses.
-> which approach you use is really depends on your application and its querring requirements.
-> so thats why we have to do trade off between to approaches, we can't have both at the same time.



code : 

ex. 1:  Using only one author

const mongoose = require("mongoose");
const connectDB = async () => {
  try {
    const connect = await mongoose.connect("mongodb://127.0.0.1/playground");
    console.log("Database Connected");
    console.log("Host : ", connect.connection.host);
    console.log("DB Name : ", connect.connection.name);
  } catch (err) {
    console.log("Database not connected");
    console.log(err.message);
  }
};

connectDB();



const authorSchema = new mongoose.Schema({
  authorName: String,
  phone: Number,
  age: Number,
});

const courseSchema = new mongoose.Schema({
  courseName: String,
  author: {
    type: authorSchema,
    required: true,
  },
});

const Course = new mongoose.model("Course", courseSchema);

const getAllCourses = async () => {
  try {
    const courses = await Course.find();
    console.log(courses);
  } catch (err) {
    console.log(err.message);
  }
};

const createCourse = async (courseName, author) => {
  try {
    const course = await Course.create({
      courseName,
      author,
    });
    console.log(course);
  } catch (err) {
    console.log(err.message);
  }
};

const updateInnerAuthor = async (courseId, authorObj) => {
  try {
    // update only one document.
    const course = await Course.findByIdAndUpdate(
      courseId,
      {
        $set: {
          "author.authorName": authorObj.authorName,
        },
      },
      { new: true }
    );
    console.log(course);
  } catch (err) {
    console.log(err.message);
  }
};

const getAllCoursesOfMoshAndUpdate = async () => {
  try {
    // get all courses of mosh and update phone.
    const courses = await Course.updateMany(
      { "author.authorName": "Mosh Hamedani" },
      {
        $set: {
          "author.phone": 9587963177,
        },
      }
    );
    console.log(courses);
  } catch (err) {
    console.log(err.message);
  }
};

const getAllCoursesOfMosh = async () => {
  try {
    const courses = await Course.find({ "author.authorName": "Mosh Hamedani" });
    console.log(courses);
  } catch (err) {
    console.log(err.message);
  }
};

// createCourse('Express Js', {authorName: 'Code With Harry', age: 30, phone: 7721031355});

// updateInnerAuthor('6560c071c4bed105b3918e4a', {authorName: 'Mosh Hamedani'})

// getAllCoursesOfMoshAndUpdate();

// getAllCourses()









ex. 2 : Using array of authors : Embedding Documents Using an array of sub-documents


const mongoose = require("mongoose");
const connectDB = async () => {
  try {
    const connect = await mongoose.connect("mongodb://127.0.0.1/playground");
    console.log("Database Connected");
    console.log("Host : ", connect.connection.host);
    console.log("DB Name : ", connect.connection.name);
  } catch (err) {
    console.log("Database not connected");
    console.log(err.message);
  }
};
connectDB();

const authorSchema = new mongoose.Schema({
  authorName: String,
  phone: Number,
  age: Number,
});

const courseSchema = new mongoose.Schema({
  courseName: String,
  authors: {
    type: [authorSchema],
    required: true,
  },
});

const Course = new mongoose.model("Course", courseSchema);

const getAllCourses = async () => {
  try {
    const courses = await Course.find();
    console.log(courses);
  } catch (err) {
    console.log(err.message);
  }
};

const createCourseWithMultipleAuthors = async (courseName, authors) => {
  try {
    const course = await Course.create({
      courseName,
      authors,
    });
    console.log(course);
  } catch (err) {
    console.log(err.message);
  }
};

const addAuthor = async (courseId, author) => {
  try {
    const course = await Course.findById(courseId);
    course.authors.push(author);
    await course.save();
    console.log("Author added successfully");
  } catch (err) {
    console.log(err.message);
  }
};

const removeAuthor = async (courseId, authorId) => {
  try {
    const course = await Course.findById(courseId);
    const author = course.authors.id(authorId);

    console.log('course : ', course);
    console.log('author: ', author);

    author.deleteOne();
    await course.save();
    console.log("Author removed successfully");
  } catch (err) {
    console.log(err.message);
  }
};


// addAuthor('6561757b8860b20bab3e9393', {authorName: "Vinod Thapa", phone: 7784521355, age: 22});
// removeAuthor("6561757b8860b20bab3e9393", "65617c9db6e6e3621bf4e5c7");

// createCourseWithMultipleAuthors('Python Course', [
//     {authorName: 'Mosh hamedani', age: 50, phone: 9527370288},
//     {authorName: 'Code With Harry', age: 30, phone: 7721031355},
// ]);
