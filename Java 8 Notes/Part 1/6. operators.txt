Java Operators: 

-> Operators are used to perform operations on variables and values.


Java divides the operators into the following groups: 

1. Arithmetic operators
2. Assignment operators
3. Comparison operators
4. Logical operators
5. Bitwise operators



Arithmetic Operators
--------------------
Arithmetic operators are used to perform common mathematical operations.

+	Addition	Adds together two values		x + y
-	Subtraction	Subtracts one value from another	x - y
*	Multiplication	Multiplies two values			x * y
/	Division	Divides one value by another		x / y	
%	Modulus		Returns the division remainder		x % y	
++	Increment	Increases the value of a variable by 1	++x	
--	Decrement	Decreases the value of a variable by 1	--x

There are two types of increment operators: pre-increment and post-increment.
There are two types of decrement operators: pre-decrement and post-decrement.

// Post-increment: 
int a = 10;
int b = a++;  // Assign a to b first, then increment a
System.out.println("a: " + a);  // Output: 11
System.out.println("b: " + b);  // Output: 10

// Pre-increment:
int x = 5;
int y = ++x;  // Increment x first, then assign to y
System.out.println("x: " + x);  // Output: 6
System.out.println("y: " + y);  // Output: 6

// Pre-decrement:
int x = 5;
int y = --x;  // Decrement x first, then assign to y
System.out.println("x: " + x);  // Output: 4
System.out.println("y: " + y);  // Output: 4

// Post-decrement:
int a = 10;
int b = a--;  // Assign a to b first, then decrement a
System.out.println("a: " + a);  // Output: 9
System.out.println("b: " + b);  // Output: 10






Assignment Operators
-------------------------
Assignment operators are used to assign values to variables

Operator	Example		Same As
=		x = 5		x = 5
+=		x += 3		x = x + 3	
-=		x -= 3		x = x - 3	
*=		x *= 3		x = x * 3	
/=		x /= 3		x = x / 3	
%=		x %= 3		x = x % 3	
&=		x &= 3		x = x & 3	
|=		x |= 3		x = x | 3	
^=		x ^= 3		x = x ^ 3	
>>=		x >>= 3		x = x >> 3	
<<=		x <<= 3		x = x << 3





Comparison Operators
-------------------------
Comparison operators are used to compare two values (or variables).
The return value of a comparison is either true or false.
		
==	Equal to			x == y	
!=	Not equal			x != y	
>	Greater than			x > y	
<	Less than			x < y	
>=	Greater than or equal to	x >= y	
<=	Less than or equal to		x <= y






Logical Operators
------------------
The return value of a logical is either true or false.

Operator	Name		Description							Example	Try it
&& 		Logical and	Returns true if both statements are true			x < 5 &&  x < 10	
|| 		Logical or	Returns true if one of the statements is true			x < 5 || x < 4	
!		Logical not	Reverse the result, returns false if the result is true		!(x < 5 && x < 10)






Ternary or conditional operator: 
--------------------------------

-> The ternary operator, also known as the conditional operator
-> The ternary operator, is a shorthand way of writing an if-else statement in Java

int max = (10>5)? 10:5;






instance operator: 
------------------
-> this operator is used to check if an object belongs to class or not.
-> return true or false

ex. boolean res = obj instanceof HelloWorld;




new operator: 
-------------

-> The new operator is used to create an instance of a class or to create an array. 
-> When you create a object using the new operator, the Java Virtual Machine (JVM) allocates memory to store the object's data.
-> Objects are created on heap memory by JVM dynamically(runtime);
ex. 
HelloWorld obj1 = new HelloWorld();
int[] nums = new int[5]






cast operator: 

-> Cast operator is used to convert one data type into another datatype.
-> When you assign a value from a larger data type to a smaller data type in Java, you may need to use a cast operator to explicitly convert the value. 
This process is known as type casting.
-> When casting from a larger data type to a smaller data type, there is a risk of data loss if the value cannot be represented in the smaller data type.

int num1;
long num2 = 123456789123456789l;
num2 = (int)num1;

int num1;
float num2 = 10.23f;
num1 = (float)num2;
sout(num1);// 10 -> data loss of .23



























