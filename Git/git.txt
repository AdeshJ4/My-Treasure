🎯 "git init"
👉 When you run git init, Git starts tracking your "project", but it only tracks files — not empty folders.

============================================================================================================================================================


git config --global user.name     -> Adesh Jadhav 
git config --global user.email    -> adejad1234@gmail.com


============================================================================================================================================================


🔹 What is a Fork?

👉 A fork is just a copy of someone else’s repository into your own GitHub account.

It lets you:
Experiment freely (without breaking the original project).
Suggest changes to the original project later (via Pull Request).

👉 Think of it like this:
Fork = photocopy of a book that is now yours.
Clone = borrowing a book from the library to read at home.

🎯 When You’re Contributing to Open Source (not your job)
👉 The repo belongs to someone else (you don’t have push rights).
👉 Here, you fork the repo first → make your own copy on GitHub.
👉 Then you clone your fork to your PC, do changes, and submit a Pull Request to the original project.

🎯 When You’re Doing a Job (Company Project)
👉 The company already has a repo on GitHub / GitLab / Bitbucket.
👉 You don’t fork it (because you’re not an outsider).
👉 Instead, you clone the repo directly and start working.
👉 That repo is usually private, and your manager/lead gives you access.
👉 The remote will be called origin (default).
👉 You create branches, commit, and push code back to the company’s repo.


🟢 So, in short:
👉 Job / Company Project → Just git clone (no fork needed).
👉 Open Source Contribution → Fork (on GitHub) → Clone (to your PC).


============================================================================================================================================================

🔹 What is git add?
👉 It is used to track an untracked files. (use "git add <file>..." to "include in" what will be "committed")
👉 "git add" is used to move changes from the 'working directory' to the 'staging area'.
👉 Only changes that are in the 'staging area' can be committed with git commit.
👉 summary - select which changes you want in your next commit.
👉 📝 You edit files → 📦 git add (pack changes for commit) → ✅ git commit (save snapshot in history).

Syntax: 

1. "git add <file>"
2. "git add index.html"   (Add a specific file)
3. "git add index.html style.css"     (Add multiple files)
4. "git add ."      (Add all changes in the current directory (and subfolders))
5. "git add -A"     (Add all files in the entire repository)


============================================================================================================================================================


🔹 What is a Remote?  🔹 Why Have Multiple Remotes?

👉 A remote is just a URL (like GitHub/GitLab repo link) that points to a repository somewhere else.
👉 By default, when you git clone, Git sets up one remote called origin.

👉 Example:
```
git remote -v           (list all remotes)
```

Might show:

```
origin   https://github.com/YourFork/repo.git (fetch)
upstream https://github.com/MainOwner/repo.git (fetch)
origin  https://github.com/AdeshJ4/Doctor-Appointment-Booking-System-Client.git (fetch)
origin  https://github.com/AdeshJ4/Doctor-Appointment-Booking-System-Client.git (push)
```

🎯 You add multiple remotes when you need to interact with more than one repository for the same project.
🟢 Common Cases:

1️⃣ Open Source Contribution (Fork + Upstream)
You fork a repo (your copy = origin).
The original repo = upstream.
So you set two remotes:
origin → your fork (you can push here ✅).
upstream → original repo (read-only, you fetch updates from here).
👉 This way, you can keep your fork updated with the main project.

2️⃣ Company + Your Own Copy (rare in jobs)
Sometimes, a developer might fork the company repo into their own account (for experimenting).
Then they’d add:
origin → company repo
personal → their fork
👉 Not very common in jobs unless you’re trying something experimental.


🎯 Is It Necessary to Create Multiple Remotes?
👉 No, not always.
👉 For most job/company projects, you will only use one remote (origin) because you have direct push access to the company’s repo.
👉 Multiple remotes are optional and usually for special cases like open-source or cross-team collaboration.



============================================================================================================================================================

🔹 Branch Management:

1️⃣ List all local branches: 
**git branch**
👉 Shows only branches available on your machine.

2️⃣ List all remote-tracking branches
**git branch -r**
👉 Shows branches from the remote (origin/some-branch).

3️⃣ List all branches (local + remote)
**git branch -a**

4️⃣ Create a new branch (but don’t switch)
**git branch branch-name**

5️⃣ Create and switch to a new branch 
**git switch -c branch-name**  (recommended)    or     **git checkout -b branch-name**   (not recommended)


7️⃣ Switch to an existing branch  
**$ git switch branch-name **  (recommended)   or      **$ git checkout branch-name **     (not recommended)



🔹 Branch Deletion

9️⃣ Delete a local branch
**git branch -d branch-name**
👉 -d = safe delete (won’t delete if unmerged).
👉 Use -D (capital D) to force delete.
Note: if you don't merge child branch in source/parent branch then it will give you error but if you publish the child branch then it will not give you error because 
publish child branch can be merege in source/parent branch 

1️⃣0️⃣  Delete a remote branch
**git push origin --delete branch-name**


🔹 Branch Info & Tracking

1️⃣1️⃣ See branch details with origin (last commit on each)
$ git branch -vv
* b1   fee14fb ooooo
  main 1977c62 [origin/main] Entry Point


1️⃣2️⃣  Publish Your Local Branch
$ git push -u origin feat/login

What this does:
origin → your remote name (default when you clone).
feat/login → your local branch name.
-u (or --set-upstream) → links your local branch with the remote branch.


1️⃣3️⃣  Fetch all remote branches
$ git fetch origin


📝 Git Notes – Switching to a Remote Branch
==================================================
🔹 Problem / Scenario
```
👉 There is a branch called "feat/login" on origin but you don't have it on your local so :
```

You ran 1:  $git fetch origin
You ran 2:  $ git branch
* b1
  main
You ran 3:  $git branch -a
* b1    <- you are currently on this branch 
  main
  remotes/origin/main
  remotes/origin/b1
  remotes/origin/feat/login     <--- you want this on your local   or   switch to the remote branch 'feat/login'

🔹 Answer

You cannot directly checkout "remotes/origin/feat/login" because it’s a remote-tracking branch (read-only).
You need to create a local branch that tracks it.

👉 Command:
"$git switch -c feat/login origin/feat/login"       or      "$git checkout -b feat/login origin/feat/login"
Switched to a new branch 'feat/login'
Branch 'feat/login' set up to track remote branch 'feat/login' from 'origin'.

🔹 Explanation

feat/login → new local branch name.
origin/feat/login → remote branch it will track.
After this, local feat/login will automatically connect to remote origin/feat/login. (so 'git pull' and 'git push' will work automatically).


📝 Git Notes – Fetching Only the Branch You Need
==================================================
🔹 Problem / Scenario
```
On the remote (origin) there are lots of branches.
But you don’t want to fetch/download all branches into your local repo.
You only want specific branches (say b3) locally.
```
🔹 Answer

Instead of fetching all ("$ git fetch origin "), you can fetch only the branch you need and then create a local branch from it.

👉 Command:

$git fetch origin b3
$git switch -c b3 origin/b3          or        $git checkout -b b3 origin/b3

🟢 Explanation
$git fetch origin b3 → fetches only the b3 branch from remote.
$$git switch -c b3 origin/b3  :
-c → create a new branch.
b3 → name of your new local branch.
origin/b3 → remote branch it should track.
👉 After this, your local b3 branch will automatically track remote origin/b3.
👉 This way, you avoid downloading all remote branches.

============================================================================================================================================================


🔹 whats difference between "git fetch origin" and "git fetch --all"

In Summary : use "git fetch origin" if you have single origin which is common in many cases even in job (since in company you have single remote called origin) 
and use "git fetch --all" if you have multiple remotes which is not common case, use it only if you fork a repo.

1️⃣ "git fetch origin":

👉 Fetches updates from the remote named "origin" only.
👉 origin is usually the default remote created when you clone a repo:
👉 If your repo has only one remote (origin) then use this command.

```
git clone https://github.com/user/repo.git
# remote named 'origin' gets created automatically
```

If your repo has only one remote (origin) then,
```
git fetch origin
```
will download "all new branches", tags, commits from that remote.


2️⃣ "git fetch --all":
👉 Fetches updates from all remotes configured in your repo.
👉 Useful when you have multiple remotes (e.g., origin, upstream, team-remote).

👉 Example:
```
git remote -v           (list all remotes)
```

Might show:

```
origin   https://github.com/YourFork/repo.git (fetch)
upstream https://github.com/MainOwner/repo.git (fetch)
```

Now:
```
git fetch --all
```

will fetch from both:
origin → your fork
upstream → the main repo


✅ Practical Scenario
You cloned a fork:
```
git clone https://github.com/YourFork/repo.git
```
→ You have origin.

You add the original repo as another remote:
```
git remote add upstream https://github.com/MainOwner/repo.git
```

If you run:
```
git fetch origin
```
→ Fetches only your fork’s updates.

If you run:
```
git fetch --all
```
→ Fetches both your fork (origin) and the main repo (upstream).





-> "git branch -r"
See All Remote Branches (e.g., origin/branch_name)
-> "git branch -a"
To see both local and remote branches
-> "git fetch origin"
Fetch the all Remote Branches code: 
-> "git remote -v"    (list all remotes)
origin  https://github.com/AdeshJ4/Doctor-Appointment-Booking-System-Client.git (fetch)
origin  https://github.com/AdeshJ4/Doctor-Appointment-Booking-System-Client.git (push)
----------------------------






============================================================================================================================================================


stash : 

🔹 Why use git stash?
git stash is a command used to temporarily save your uncommitted changes (both staged and unstaged) without committing them.
It gives you a clean working directory so you can switch branches or pull updates, and later you can restore your saved changes.

Imagine this:
You’re working on a new feature but suddenly need to switch to another branch to fix a bug.
You don’t want to commit half-done work, but also don’t want to lose it.
👉 That’s where git stash helps. It saves your changes aside, and you can apply them back later.

push untracked stash:
git stash push -u -m "pastellification changes"

apply named stash:
git stash list
git stash apply stash@{0}


abort the merge if you don't want new changes: 
if you have this : (poc/dev|MERGING)
git merge --abort



----------------------------


### **Difference Between `git checkout branch_name` and `git switch branch_name`**

#### **1. `git checkout branch_name` (Older & More General)**
- Used in **older versions** of Git (before Git 2.23).
- Can switch branches **or** checkout a specific commit.
- If the branch doesn’t exist, you need to use `-b` to create it:  
  ```bash
  git checkout -b new_branch
  ```
- Can be **confusing** because it also allows checking out files (e.g., `git checkout file.txt`).

#### **2. `git switch branch_name` (Newer & More Specific)**
- Introduced in **Git 2.23+** to make branch switching more intuitive.
- **Only** used for switching branches, making it safer.
- If the branch doesn’t exist, use `-c` to create it:  
  ```bash
  git switch -c new_branch
  ```
- Cannot be used for checking out specific commits or files.

---

### **Which One Should You Use?**
✅ **Use `git switch`** if you’re just changing branches (cleaner & safer).  
✅ **Use `git checkout`** if you’re using an older Git version or need to check out specific files/commits.  

------------------

Merge changes :
---------------

I have two branches locally since my repository is not published on GitHub:
1. master
2. feat/button
Currently, I am on the feat/button branch, and I have committed all my feature changes. 
Now, I want to merge this feature branch into the master branch.

sol> 
You can merge your feat/button branch into master by following these steps:

1️⃣ Switch to the master Branch
Since you are currently on feat/button, first switch to master:
```
git switch master
```


2️⃣ Merge feat/button into master
Run the following command to merge the changes from feat/button into master:
```
git merge feat/button
```

3️⃣ Resolve Any Merge Conflicts (If Any)
If Git reports conflicts, open the affected files, resolve them, and then run:
```
git add .
git commit -m "Resolved merge conflicts"
```

4️⃣ Verify the Merge
Check if everything looks good:
```
git log --oneline --graph --decorate --all
```

5️⃣ Delete the feat/button Branch (Optional)
If you no longer need the feat/button branch, delete it:
```
git branch -d feat/button
```

Now, your master branch has all the changes from feat/button. 🚀










How to create branch locally ?
-> git branch    
This will list all existing branches and highlight the current branch.

🚀Create a New Branch (Multiple ways):
1️⃣. git branch branch_name       or  
2️⃣. git checkout -b new_branch   or  
3️⃣. git switch -c new_branch    (recommended)

1. you have to use seprate checkout command to switch to that branch. ex: git checkout new_branch.
2. Can switch branches or checkout a specific commit. If the branch doesn’t exist, you need to use -b to create it. 
Can be confusing because it also allows checking out files (e.g., git checkout file.txt).
3. Only used for switching branches, making it safer. If the branch doesn’t exist, use -c to create it. 
Cannot be used for checking out specific commits or files.



-> git checkout branch_name
Switch to the New Branch if exists, if not then use -b ex: git checkout -b branch_name : this will create new branch and switch to that branch automatically.
-> git checkout master  # or git switch master
If you're not on master, switch to it:
-> git pull origin master
This merges the latest updates from the remote master branch into your local master branch.
















Question : how to publish the branch 

currently on server we don't have branch called b1. after running bellow command new branch called origin b1 will be created.
***
git push -u origin anurag/dev               // -u (or --set-upstream):
***


Question : How to delete branch from local and server.

1. Delete the local branch:

i] (safe delete):
*** 
git branch -d b1  
***
This command deletes the local branch only if it has been fully merged with your current branch or other branches. If it hasn't been merged, Git will refuse to delete it to prevent accidental loss of unmerged work.

ii] (force delete):
***
git branch -D b1
***
This command forces the deletion of the local branch, regardless of whether it has been merged. Use this with caution, as it can lead to the loss of unmerged changes.


2. Delete the remote branch:
***
git push origin --delete feature/CourseDetailsPage
***git branch -D feature/CourseDetailsPage












git init
git add .
git add index.js  ->  now tracking this file, you can commit this file changes
git commit -m "msg"
git commit -a -m "msg"
git show 005c00c
git blame index.js   -> it will display each line of index.js along with the commit hash, author, and timestamp of the last change made to that line.

git revert  
git reset 

publish branch -> git push origin b1



git push origin main     or  git push origin main --force
git pull origin main

================================================================================================================================================================================


Branch not available locally : 

When branch is available on remote server but you can't see it in local then run these commands: 

1. List All Remote Branches: "git branch -r"  or "git branch -a"
2. Fetch the all Remote Branches code: "git fetch origin"
3. Switch to given branch : "git switch b1"


================================================================================================================================================================================

Branch tracking : 

Branch tracking in Git refers to the concept where a local branch is linked or "tracked" to a corresponding branch on a remote repository. This tracking relationship allows Git to understand which remote branch your local branch is associated with, making commands like git pull and git push more intuitive and less cumbersome.
***
git branch --set-upstream-to=origin/branch_name
***

Simplified Commands: When a local branch is tracking a remote branch, you can use simpler commands like git pull and git push without specifying the remote or branch name.
Automatic Merge Information: When you pull changes, Git knows which remote branch to pull from and merge into your current branch.



===================================================================================================================================================================================

Question : what is origin ?
origin: This is the default name for the remote repository.

===================================================================================================================================================================================

Question : Your branch is ahead of 'origin/main' by 1 commit.

$ git log --oneline 
9168177 (HEAD -> main) removed main() calling and extra specing
c9fec13 (origin/main) Added Company function
bb1b886 Added new function called greeting()
fd86d36 Added main function

$ git status
On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean

explanation: on origin main branch you have three commits, but on local main branch you have 4 commits. so you have 1 extra commit that have to push on origin/main.


===================================================================================================================================================================================


Q]  Explain " git merge" && "git fetch"  && "git pull" && "git push"


1. git fetch: 
-> git fetch downloads commits, files, and refs from a remote repository into your local repository.
-> Unlike git pull, it does not automatically merge the changes into your current branch.



2. git merge: 
-> git merge is used to combine the changes from one branch into another branch. 
-> When you merge branches, Git takes the commits from the source branch and applies them to the target branch, combining the histories.
***
git merge <branch-name>
***
Example:
If you are on the main branch and you want to merge changes from feature-branch into main, you would use:
***
git merge feature-branch
***
Scenarios to Use git merge:
-> When you’ve completed a feature in a branch and want to incorporate those changes into another branch, like main.

===================================================================================================================================================================================

Question : what this command  do : git push origin main

-> The command git push origin main is used to upload the changes from your local main branch to the main branch on the remote repository named origin.
-> If you have committed changes in your local main branch that are not present on the remote main branch, these commits will be uploaded

what i have to check before running this command ?

1. Commit Your Changes:

Ensure that all your changes are committed. If you have uncommitted changes, you can commit them using:
***
git add .
git commit -m "Your commit message"
***

2. Check Branch Name:

Verify that you are on the correct branch, main, if that's the branch you intend to push:
This command will highlight the current branch with an asterisk (*).
***
git branch
***

3. Review Commit History

Review your commit history to ensure all changes are as expected. Use:
***
git log --oneline
***
This allows you to see a list of commits and their messages. Make sure that all the commits you intend to push are included and correct.


4. Pull Latest Changes:

Ensure that your local branch is up-to-date with the remote branch to avoid conflicts:
***
git pull origin main
***
This command fetches the latest changes from the remote main branch and merges them into your local main branch. 
If there are conflicts, resolve them before pushing.


5. Check for Conflicts

If you've pulled changes from the remote and encountered conflicts, resolve them. Use:
***
git status
***
This command shows the status of your working directory and staged changes. It helps identify if there are any conflicts that need resolution.

===================================================================================================================================================================================


Question : git reset
git reset --hard c9fec13 (revert commit) -> all commits after this commit will disappear

$ git log --oneline
005c00c (HEAD -> main, origin/main) Added Addition Function
bbbab42 Added stack function
c9fec13 Added Company function 
bb1b886 Added new function called greeting()
fd86d36 Added main function

$ git reset --hard  c9fec13
HEAD is now at c9fec13 Added Company function

$ git log --oneline
c9fec13 (HEAD -> main) Added Company function
bb1b886 Added new function called greeting()
fd86d36 Added main function

$ git push origin main --force
Total 0 (delta 0), reused 0 (delta 0), pack-reused 0
To github.com:AdeshJ4/anime.git
 + 005c00c...c9fec13 main -> main (forced update)


===================================================================================================================================================================================


Question : git revert 

-> The git revert command is used to create a new commit that undoes the changes introduced by a specific previous commit
-> This is a safe way to "undo" changes because it doesn't rewrite history, unlike git reset. 
-> Instead, it creates a new commit that reverses the changes made by the specified commit, preserving the commit history and making it clear that a particular change was reversed.

$ git log --oneline
db9cc45 Added Addition function
227bd6b remove main() calling
fd86d36 (origin/main) Added main function

$ git revert 227bd6b

$ git log --oneline
e9bfe37 (HEAD -> main) Revert "remove main() calling"
db9cc45 Added Addition function
227bd6b remove main() calling
fd86d36 (origin/main) Added main function

===================================================================================================================================================================================

Question : How to delete branch from local and server.

1. Delete the local branch:

i] (safe delete):
*** 
git branch -d b1  
***
This command deletes the local branch only if it has been fully merged with your current branch or other branches. If it hasn't been merged, Git will refuse to delete it to prevent accidental loss of unmerged work.

ii] (force delete):
***
git branch -D b1
***
This command forces the deletion of the local branch, regardless of whether it has been merged. Use this with caution, as it can lead to the loss of unmerged changes.


2. Delete the remote branch:
***
git push origin --delete feature/CourseDetailsPage
***git branch -D feature/CourseDetailsPage

===================================================================================================================================================================================


Question : how to publish the branch 

currently on server we don't have branch called b1. after running bellow command new branch called origin b1 will be created.
***
git push -u origin b1               // -u (or --set-upstream):
***
git push -u origin anurag/dev

===================================================================================================================================================================================


Question : merge code from one branch to another

PR: 

-> push your code in your branch 
-> then go inside Pull requests tab of github
-> click on New pull request tab
-> check your code and create pull request.





===================================================================================================================================================================================




git stash: 

***
git stash -u       // to stash the changes
git stash apply    // to apply stash again. does not remove stash just applied.
git stash pop	   // to apply and remove the latest stash. same as git stash apply but it removed that stash.
git stash list     // list all stashes
***

-> Stashing changes is useful in various situations when you need to temporarily set aside your uncommitted work. 

Here are some common scenarios where you might want to use git stash:

1. Switching Branches: 
-> If you need to switch branches but have uncommitted changes that you don't want to commit yet, stashing can help:
Scenario: You're working on a feature branch and suddenly need to switch to another branch to fix a bug or review code.
Solution: Use git stash to save your uncommitted changes, switch branches, and then use git stash apply or git stash pop to reapply the changes when you switch back.

2. Pulling Latest Changes
-> Before pulling the latest changes from the remote repository, it's a good practice to ensure your working directory is clean. 
Scenario: You need to pull the latest changes from the remote branch but have some work in progress.
Solution: Use git stash to temporarily save your changes, then git pull to update your branch. After pulling, you can reapply your stashed changes.



================================================================================================================================================================================


incoming changes  &&  current changes: 

1. Current Changes: 
-> "Current changes" refer to the modifications that you have made locally in your working directory or branch. These changes have not yet been incorporated into the remote repository or another branch. They represent your work-in-progress and can include:
-> Uncommitted Changes: Modifications you have made in your working directory but haven't committed yet. These are the changes you see when you run git status and they are listed as modified, new (untracked), or deleted files.
-> Committed Changes: Changes you have committed to your local branch that may not yet be pushed to the remote repository or merged into another branch.
-> Examples of Current Changes:
Editing a file and not yet committing those edits.
Adding new files that are not yet tracked by Git.
Committing changes to your local branch but not pushing them to the remote.


2. Incoming Changes
-> "Incoming changes" are modifications made in the remote repository or in another branch that are not yet present in your current branch. These changes are typically discovered when you perform operations like fetching, pulling, or merging, and they can include:
-> Remote Changes: Updates in the remote repository that you haven't yet pulled into your local branch. For example, if someone else has pushed new commits to the main branch on the remote repository, these are considered incoming changes for your local main branch.
-> Other Branch Changes: Changes from another branch that you want to merge into your current branch. For instance, if you're working on feature-branch and want to merge updates from main, the changes in main are incoming relative to your feature-branch.
-> Examples of Incoming Changes:
A colleague pushes new commits to the main branch, and you want to update your local main branch.
Changes made in a feature branch that you want to merge into the main development branch.


common example : 

when you stash your changes in order to take pull from main branch, after taking pull you apply your stash. then if conflicts occurs then you code comes under "incoming Changes" because we apply stash after pull so incoming is our stash changes.

in case if you commit you changes and not stash and you pull from main/parent then if conflicts occur then your changes comes under "current changes". because in this case incoming changes are from parent. if you accepts current changes then in source control yo can see message like this "Merge branch 'main' of github.com:AdeshJ4/anime into b1", or you can run this command in your terminal "git status" and ou will see this message:
 ***
Admin@DESKTOP-ADESH MINGW64 ~/Desktop/anime (b1|MERGING)
$ git status
On branch b1
Your branch is ahead of 'origin/b1' by 1 commit.
  (use "git push" to publish your local commits)

All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)
****
in this case in terminal you have to use "git commit" to conclude merge, just copy the message from source control and paste it like bellow: 
***
Admin@DESKTOP-ADESH MINGW64 ~/Desktop/anime (b1|MERGING)
$ git commit -m "Merge branch 'main' of github.com:AdeshJ4/anime into b1"
[b1 cd88c60] Merge branch 'main' of github.com:AdeshJ4/anime into b1
***
after that push to your branch.