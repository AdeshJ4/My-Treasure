Two Types of Components : 
1. class COmponent 
2. functional component

-> functional component considered to be stateless component because functional component don't have access to state.
where class component considered as a stateful component because they have access to state.
-> Components are like functions that return HTML elements more specifically JSX through render() method.
-> When creating a React component, the component's name MUST start with an upper case letter



React Class Components: 
-----------------------


-> Before React 16.8, Class components were the only way to track state and lifecycle on a React component
-> Function components were considered "state-less".
-> With the addition of Hooks, Function components are now almost equivalent to Class components
-> The differences are so minor that you will probably never need to use a Class component in React.
-> Even though Function components are preferred, there are no current plans on removing Class components from React.

-> when we create class component we have to extend that component with React.Component.
-> this statement "React.Component" create an inheritance to React.Component and give access to all methods of React.Component.


Component Constructor: 
----------------------

-> The constructor() method is called before anything else, when the component is initiated. 
-> The constructor function is where you 'initiate' the component's properties.
-> In React, component properties should be kept in an 'object' called 'state'.
-> we write super() in the constructor function which executes the parent component's constructor function, and your component has 
access to all the functions of the parent component (React.Component).

class Car extends React.Component {
  constructor() {
    super();
    this.state = {color: "red"};
  }
  render() {
    return <h2>I am a {this.state.color} Car!</h2>;
  }
}





Props: 
-------
-> we access props like : this.props.color
-> props should always be passed to the constructor and also to the React.Component via the super() method.
ex: 

class Car extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return <h2>I am a {this.props.model}!</h2>;
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car model="Mustang"/>);



React Class Component State:
----------------------------

-> React Class components have a built-in state object.
-> the state refers to application data, properties that need to be tracked.
-> When the state object changes, the component re-renders.
-> The state object is initialized in the constructor
-> Refer to the state object anywhere in the component by using the this.state.propertyname syntax:
-> To change a value in the state object, use the this.setState() method.
-> When a value in the state object changes, the component will re-render, meaning that the output will change according to the new 
value(s).



