React Custom Hooks:
-------------------
-> Hooks are reusable functions.
-> When you have 'component logic' that needs to be used by multiple components, we can 'extract that logic' to a custom Hook.
-> Custom Hooks start with "use". Example: useFetch.


Example: 
--------
-> Suppose we have Home Component, inside that we are fetching the data.
-> So this Fetch Logic may be needed by another components as well, so we extract that logic inside custom hook.
-> we placed that logic inside a file and named that file 'useFetch.js'
-> Because name of hook must be starts with "use" and since the logic is about fetching data. so named of custom hook is "useFetch.js"



App.jsx: 

useFetch.jsx: 
-------------
import axios from "axios";
import { useEffect, useState } from "react";

const useFetch = (url) => {
    const [data, setData] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);


    useEffect(() => {
        const fetchData = async (controller) => {
            try{
                const { data } = await axios.get(url, { signal: controller.signal});
                setData(data); 
            }catch(err){
                setError(err.message);
            }finally{
                setIsLoading(false);
            }
        }

        const controller = new AbortController();
        fetchData(controller);
        return () => controller.abort();
    }, [url]);

    return {
        data,
        isLoading,
        error
    }
}

export default useFetch;


contact.jsx: 
------------

import React from 'react'
import useFetch from '../hooks/useFetch';

const Contact = () => {
    const { data: posts, isLoading: isLoadingPosts, error: postsError } = useFetch("https://jsonplaceholder.typicode.com/posts");
    const { data: comments, isLoading: isLoadingComments, error: commentsError } = useFetch("https://jsonplaceholder.typicode.com/comments");


    const displayPosts = (posts) => {
        if(isLoadingPosts) return <div>Loading Posts..</div>;
        if(postsError) return <div>{postsError}</div>;

        return posts && posts.length > 0 ? <table>
        <thead>
            <tr>
                <th>userId</th>
                <th>id</th>
                <th>title</th>
                <th>body</th>
            </tr>
        </thead>
        <tbody>
            {posts.map(d => (<tr key={d.id}>
                <td>{d.userId}</td>
                <td>{d.id}</td>
                <td>{d.title}</td>
                <td>{d.body.slice(0, 5)}</td>
            </tr>))}
        </tbody>
    </table> : <div>No Posts</div>
    }

    const displayComments = (comments) => {
        if(isLoadingComments) return <div>Loading Commnets..</div>;
        if(commentsError) return <div>{commentsError}</div>;

        return comments && comments.length > 0 ?  <table>
            <thead>
                <tr>
                    <th>postId</th>
                    <th>id</th>
                    <th>email</th>
                    <th>body</th>
                </tr>
            </thead>
            <tbody>
                {comments.map(d => (<tr key={d.id}>
                    <td>{d.postId}</td>
                    <td>{d.id}</td>
                    <td>{d.email}</td>
                    <td>{d.body.slice(0, 5)}</td>
                </tr>))}
            </tbody>
        </table> : <div>No Commnets</div>
    }


    return (
        <div style={{ display: 'flex', gap: "10px"}}>
            {/* display Posts */}
            <div style={{width: "50%", minHeight: '100vh', height: "100%", padding: "10px", border: '1px solid black', borderRadius: "50px"}}>
                <h1>Posts</h1>
                {displayPosts(posts)}
            </div>
            {/* display Comments */}
            <div style={{width: "50%",minHeight: '100vh', height: "100%", padding: "10px", border: '1px solid black', borderRadius: "50px"}}>
                <h1>Commnets</h1>
                {displayComments(comments)}
            </div>
        </div>
    )
}

export default Contact



ðŸš€ custom useThrottle hook: 
============================

const useThrottle = (callback, delay) => {
  const lastCallRef = useRef(0);

  return (...args) => {
    const now = new Date().getTime();
    if (now - lastCallRef.current >= delay) {
      callback(...args);
      lastCallRef.current = now;
    }
  };
};

export default useThrottle;




ðŸš€ custom useDebounce hook:
----------------------------

const useDebounce = (callback, delay) => {
  const timeoutRef = useRef(null); // Explicitly initialize as null

  useEffect(() => {  
    return () => timeoutRef.current && clearTimeout(timeoutRef.current);
  }, []);

  return (value) => {
    if (timeoutRef.current) clearTimeout(timeoutRef.current);
    timeoutRef.current = setTimeout(() => callback(value), delay);
  };
};

export default useDebounce;