// The Component which holds the state is responsible for updating it.

-> The component that owns the state is responsible for both defining and updating that state. Typically, this is a parent component.

-> In React, the principle "The component which holds the state is responsible for updating it" is a key part of the framework's 
architecture.

-> This aligns with the concept of "unidirectional data flow", where data flows in a "single direction", from parent to child components.

-> If the state needs to be updated, the stateful component will handle the logic for the update. 
This can involve functions or event handlers defined within the component.
-> The state can be passed down to child components via props. 
However, these child components are generally stateless and cannot directly modify the state they receive. 
Instead, they can trigger the parent component to update the state through callback functions (also passed via props).


State Management Example:
function ParentComponent() {
  const [count, setCount] = useState(0);

  const incrementCount = () => {
    setCount(count + 1);
  };

  return (
    <div>
      <h1>Count: {count}</h1>
      <ChildComponent increment={incrementCount} />
    </div>
  );
}

function ChildComponent({ increment }) {
  return <button onClick={increment}>Increment</button>;
}


