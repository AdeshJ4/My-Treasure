Why Use Formik? ü§î
Formik is a React library that helps manage forms efficiently. 
Without Formik, handling forms in React can be tedious, requiring state management, validation, error handling, and submission logic manually. 
Formik simplifies this process.



üî• Key Benefits of Formik:


1Ô∏è‚É£ State Management for Forms
Handles form input values, errors, touched fields, and submission state automatically.
You don't need to use useState for each input field.

example of Formik handling form state automatically without needing useState for each field:
```
import { useFormik } from "formik";
const SimpleForm = () => {
  const formik = useFormik({
    initialValues: { name: "", email: "" }, // No useState needed
    onSubmit: (values) => {
      console.log("Submitted:", values);
    },
  });

  return (
    <form onSubmit={formik.handleSubmit}>
      <input type="text" {...formik.getFieldProps("name")} placeholder="Name" />
      <input type="email" {...formik.getFieldProps("email")} placeholder="Email" />
      <button type="submit">Submit</button>
    </form>
  );
};
```

üî• Why is this better?
No need for useState for each input üéØ
Formik automatically tracks input values ‚úÖ
Cleans up the code & improves maintainability üöÄ

example If we don't use Formik, we have to manually manage form state using useState, like this:

```
import { useState } from "react";

const SimpleFormWithoutFormik = () => {
  const [formData, setFormData] = useState({ name: "", email: "" });

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log("Submitted:", formData);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input 
        type="text" 
        name="name" 
        value={formData.name} 
        onChange={handleChange} 
        placeholder="Name" 
      />
      <input 
        type="email" 
        name="email" 
        value={formData.email} 
        onChange={handleChange} 
        placeholder="Email" 
      />
      <button type="submit">Submit</button>
    </form>
  );
};

```



2Ô∏è‚É£ Easy Form Validation (with Yup)
Integrates well with Yup, making validation declarative and less error-prone.
Example:
js
Copy
Edit
const validationSchema = Yup.object({
  email: Yup.string().email("Invalid email").required("Email is required"),
  password: Yup.string().min(6, "Must be at least 6 characters").required("Password is required"),
});


```
import { useFormik } from "formik";
import * as Yup from "yup";

const validationSchema = Yup.object({
  name: Yup.string().required("Name is required"),
  email: Yup.string().email("Invalid email").required("Email is required"),
});

const FormWithYup = () => {
  const formik = useFormik({
    initialValues: { name: "", email: "" },
    validationSchema, // Validation handled by Yup
    onSubmit: (values) => console.log("Submitted:", values),
  });

  return (
    <form onSubmit={formik.handleSubmit}>
      <input type="text" {...formik.getFieldProps("name")} placeholder="Name" />
      {formik.touched.name && formik.errors.name && <p>{formik.errors.name}</p>}

      <input type="email" {...formik.getFieldProps("email")} placeholder="Email" />
      {formik.touched.email && formik.errors.email && <p>{formik.errors.email}</p>}

      <button type="submit">Submit</button>
    </form>
  );
};
```




3Ô∏è‚É£ Handles Form Submission
You get a simple onSubmit function where Formik automatically passes form values.
No need to manually collect input data.
Example:
```
<form onSubmit={formik.handleSubmit}>
  <input type="text" {...formik.getFieldProps("name")} />
  <button type="submit">Submit</button>
</form>
```




5Ô∏è‚É£ Handles Error Messages Easily
Formik automatically tracks errors (error from yup validation) and allows you to display them cleanly:
```
{formik.touched.email && formik.errors.email && <p>{formik.errors.email}</p>}
```

