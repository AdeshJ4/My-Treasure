import { useState, useEffect } from "react";
import axios, { CanceledError } from "axios";

function App() {
  const [users, setUsers] = useState(null);

  async function fetchUsers(controller) {
    try {
      const {data} = await axios.get("https://jsonplaceholder.typicode.com/users",{ signal: controller.signal });
      setUsers(data);
    } catch (err) {
      if(err instanceof CanceledError) return;
      console.log(err.message);
    }
  }

  useEffect(() => {
    const controller = new AbortController();
    fetchUsers(controller);
    return () => controller.abort();
  }, []);

  useEffect(()=>{
    if(users){
      document.title = `users: ${users.length}`;
    }else{
      document.title = 'Loading...';
    }
  }, [users]);

  async function addUser (){
    let originalUsers;
    try{
      const newUser = {id: users.length+1, name: 'Adesh Jadhav', username: 'AdeshJ4', email: 'jadhavades13061@gmail.com'};
      originalUsers = [...users];
      // ui update
      setUsers([...users, newUser]);
      // updated server
      await axios.post('https://jsonplaceholder.typicode.com/users/', newUser);
    }catch(err){
      setUsers(originalUsers);
      console.log("Error Message: ", err.message);
    }
  }

  async function updateUser (user){
    try{
      const updatedUser = {...user, name: 'New ' + user.name + ' !'};
      setUsers(users.map(u=> u.id === user.id? updatedUser : u));
      await axios.patch('https://jsonplaceholder.typicode.com/users/' + user.id, updatedUser);
    }catch(err){
      const originalUser = [...users];
      setUsers(originalUser);
      console.log(err.message);
    }
  }

  async function deleteUser (user) {
    try{
      // update ui first
      setUsers(users.filter(u => u.id !== user.id))  ;
      // update on server
      await axios.delete('https://jsonplaceholder.typicode.com/users/' + user.id)
    }catch(err){
      const originalUser = [...users];
      setUsers(originalUser);
      console.log(err.message);
    }
  }


  return (
    <>
      {users ? (
        <table className="table table-bordered">
          <thead>
            <tr>
              <th>ID</th>
              <th>Name</th>
              <th>UserName</th>
              <th>Email</th>
            </tr>
          </thead>

          <tbody>
            {users.map((user) => (
              <tr key={user.id}>
                <td>{user.id}</td>
                <td>{user.name}</td>
                <td>{user.username}</td>
                <td>{user.email}</td>
                <td style={{display:'flex', justifyContent: 'space-evenly'}}>
                      <button className="btn btn-primary " onClick={()=>updateUser(user)}>Update</button>
                      <button className="btn btn-outline-danger " onClick={()=>deleteUser(user)}>Delete</button>
                </td>
              </tr>
            ))}
          </tbody>

          <tfoot>
            <tr><td><button className="btn btn-primary" onClick={addUser}>Add User</button></td></tr>
          </tfoot>
        </table>
      ) : (
        <p>Loading...</p>
      )}
    </>
  );
}


export default App;