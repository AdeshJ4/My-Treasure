import React, { useEffect, useState } from "react";
import axios, { CanceledError } from "axios";

const Fun = () => {
  const [users, setUsers] = useState([]);
  const [error, setError] = useState("");
  const [isLoading, setLoading] = useState(false);

  const fetchData = async (controller) => {
    try {
      const res = await axios.get(
        "https://jsonplaceholder.typicode.com/users",
        { signal: controller.signal }
      );
      setUsers(res.data);
      setLoading(false);
    } catch (err) {
      if (err instanceof CanceledError) return;
      setError(err.message);
      setLoading(false);
    } finally {
      setLoading(false);
    }
  };
  
  const deleteUser = (user) => {
    const originalUsers = [...users];
    setUsers(users.filter(u=> u.id !== user.id)) ;
    axios.delete("https://jsonplaceholder.typicode.com/users/" + user.id)
      .catch((err)=> {
        setError(err.message);
        setUsers(originalUsers);
      })
  }
  
  const addUser = () => {
    const originalUsers = [...users]; 
    const newUser = { id: 0,name: 'Adesh'};
    setUsers([...users, newUser]);

    axios.post('https://jsonplaceholder.typicode.com/users/', newUser)
      .then(({data: savedData})=> setUsers([savedData, ...users])) // we are destructuring our res object and give it alice as "savedData"
      .catch((err)=> {
        setError(err.message);
        setUsers(originalUsers);
      });        
  }

  const updateUser = (user) => {
    const originalUsers = [...users];
    const updatedUser = {...user, name: user.name + ' !'};
    setUsers(users.map(u => u.id === user.id ? updateUser: u));

    axios.patch("https://jsonplaceholder.typicode.com/users/" + user.id, updatedUser)
      .catch((err)=> {
        setError(err.message);
        setUsers(originalUsers);
      });
  }

  useEffect(() => {
    const controller = new AbortController();
    setLoading(true);
    fetchData(controller);
    return () => controller.abort();
  }, []);


  return (
    <>
      {error && <p className="text-danger">{error}</p>}
      {isLoading && <div className="spinner-border"></div>}
      <button className="btn btn-primary mb-3" onClick={addUser}>Add Data</button>
      <ul className="list-group">
        {users.map((user) => (
          <li key={user.id} className="list-group-item d-flex justify-content-between">
            {user.name}
            <div>
              <button className="btn btn-outline-secondary mx-2" onClick={()=>updateUser(user)}>Update</button>
              <button className="btn btn-outline-danger" onClick={()=>deleteUser(user)}>Delete</button>
            </div>
          </li>
        ))}
      </ul>
    </>
  );
};

export default Fun;
