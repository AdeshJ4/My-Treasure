Keeping components pure: 
------------------------



Pure function:

-> pure function is function that Given the same input always return the same result.

-> so if you called a function 10 times and every time we get the same output we say function is pure but if we get different output then we say the function is impure.

-> const res = myFun(10);
   // res = 'a'

-> React is designed aroud this concept. 
-> it expects every component which we create to be pure function.
-> so  if we given same input like a same props it will always return the same JSX .and this is for performance reason. so if the inputs of components haven't change react can skip  re-rendering of that component.

-> But how we can keep our component pure.
answer for this is "keep changes out of the render phase."

example of pure function: 
-------------------------
let count = 0;
const Fun = () => {
  return(
    <>
      <h1>Count: {count}</h1>
    </>
  )
}

const App = () => {
  return (  
    <>
	// three instances of Fun component
      <Fun />
      <Fun />
      <Fun />
    </>
  );
};

output: 

Count: 0
Count: 0
Count: 0






example of impure function: 
-------------------------
let count = 0;

const Fun = () => {
  count++;
  return(
    <>
      <h1>Count: {count}</h1>
    </>
  )
}

const App = () => {
  return (  
    <>
	// three instances of Fun component
      <Fun />
      <Fun />
      <Fun />
    </>
  );
};

output: 

Count: 2
Count: 4
Count: 6









-> so to keep our component pure we should keep changes out of render phase.
-> we should not change any object that existed before rendering. like count variable here 

code: 

let count = 0;
const Fun = () => { // render phase
  count++;
  return(
    <>
      <h1>Count: {count}</h1>
    </>
  )
}


-> But note that it is totally fine to update an object that we create as a part of rendering.
for example if we move this declaration down now we declaring count variable as a part of rendering and it is totally fine to update it here.

code : 

const Fun = () => {
  let count = 0;
  count++;
  return(
    <>
      <h1>Count: {count}</h1>
    </>
  )
}

output: 

Count: 1
Count: 1
Count: 1































