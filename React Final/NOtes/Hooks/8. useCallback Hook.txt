-> The React useCallback Hook returns a memoized callback function.
-> with the help of this hook we can isolate resource intensive functions which are related to child component so that they will not automatically run on every render.
-> Every time a component re-renders, its functions get recreated. Because of this, another nested component will re-render to stop this we use useCallback hook.
-> The useCallback Hook only runs when one of its dependencies update. This can improve performance.	
-> we use memo function along with useCallback hook.


what is Memoization ?
=====================

-> Memoization is a programming technique where we are storing the results of expensive function calls and returning the cached result when the same inputs given which helps prevent unnecessary renders.


what is cached result ?
=======================
A cached result refers to the stored output or value of a computation or function call that has been previously calculated and saved for future use. When a function is memoized that means  result of a specific set of inputs is stored in memory, and if subsequent requests for the same inputs occour we can retrieve the cached result instead of recalculating it. A cache is just a temporary data





difference between memo and useCallback hook: 
----------------------------------------------

-> Suppose we have two compoents 1. App.jsx  2. Todos.jsx
-> Inside App component we have two states which are initialized using useState Hook. 1. count state  2. todos state
-> so  we are passing todos state to todo component as a props.
-> so we use memo if we are just passing state from one compnet to another componet. to stop unnecessory re-rendring we use memo in todos component.
-> Now suppose inside App.jsx we write some event Handler related to todo compoent since there is a rule in react js which is the component which old the state is responsible for updating it. since inside our App componet we have todos state so our App componet is responsible for updating it.
-> so when the state of App component changes it will re-render Todo componet also, even we are using memo inside a Todo component.
-> The reason is that Every time a component re-renders, its functions get recreated. Because of this, the addTodo function has actually changed.
-> To fix this, we can use the useCallback hook to prevent the function from being recreated unless necessary.
-> Now the Todos component will only re-render when the todos prop changes.

App.jsx:
--------

import { useState, useCallback } from 'react';
import Todo from './File2';

const App = () => {
  const [count, setCount] = useState(0);
  const [todo, setTodos] = useState(['todo1', 'todo2'])

  const addTodos = useCallback((value) => {
    setTodos([...todo, value]);
  }, [todo])

  return (
    <>
      <Todo todos={todo} addTodo={addTodos}/>
      <h1>Count: {count}</h1>
      <button onClick={()=>setCount(count+1)}>count increment</button>
    </>
  )
}

export default Fun



Todo.jsx:
---------

import {memo} from 'react'

const Todo = ({todos, addTodo}) => {
  console.log('todo component rendered');
  return (
    <>
    <ul>
      {
        todos.map((todo, index)=><li key={index}>{todo}</li>)
      }
    </ul>
    <button onClick={()=>addTodo('todo3')}>Add Todo</button>
    </>
  )
}

export default memo(Todo);































































