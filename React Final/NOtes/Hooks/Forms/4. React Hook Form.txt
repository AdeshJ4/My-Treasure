-> As our form get more complex managing form state with state hook can be time consuming.
-> for every input field we have to set two attributes : 
	1. onChange
	2. value
-> This is where we can use a popular library called "react-hook-form".
-> with this library we can build form quickly and with less code.

install : npm i react-hook-form

-> back to our component on the top we are going to import a custom hook from this library called "useForm"
	import { useForm } from 'react-hook-form';

-> we called useForm to get form object.
	const form = useForm();

-> in this object we have bunch of properties and methods. for ex we have "register" method for registering our input field with react hoook form. we have set of functions for controlling our form.

-> lets destructure  some properties from this object. 
-> name of our input field.

const { register } = useForm();
console.log(register('age')); // name of our input field.

-> In the above example register('age') return object with following properties :
{name: 'fname', onChange: ƒ, onBlur: ƒ, ref: ƒ} [[Prototype]]: Object

-> <input {...register('name')} id="name" type="text" className="form-control" />

We use spread operator to copy other properties of an register function since it return object.

-> react-hook-form uses reference object to get values from input field. so there is no re-rendering here.





code : 
------


import { useForm } from "react-hook-form";

const Form = () => {
const { register, handleSubmit } = useForm();
  const [person, setPerson] = useState(null);

  const onSubmit = (data) => {
    setPerson(data);
    console.log(data);
  };

  return (
    <>
      {person && (
        <>
          <h1>Name: {person.name}</h1>
          <h1>Age: {person.age}</h1>
        </>
      )}
      <form onSubmit={handleSubmit(onSubmit)}>
        <div className="mb-3">
          <label htmlFor="name" className="form-label">
            Name:
          </label>
          <input
            {...register("name")}
            type="text"
            id="name"
            className="form-control"
          />
        </div>

        <div className="mb-3">
          <label htmlFor="age" className="form-label">
            Age:
          </label>
          <input
            {...register("age")}
            type="number"
            id="age"
            className="form-control"
          />
        </div>

        <button className="btn btn-primary" type="submit">
          Submit
        </button>
      </form>
    </>
  );
};

export default Form;




































