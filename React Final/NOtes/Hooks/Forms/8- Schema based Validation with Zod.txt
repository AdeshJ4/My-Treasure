zod is schema based validation library.

install => npm i zod
-> Now we want to integrate react-hook-form with zod.
install => npm i @hookform/resolvers
-> This library includes resolvers for various schema based validation libraries like zod, joi, and so on..



code : 
=====

import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

// using z we can add the shape or schema of our form and all these validation rules.
const schema = z.object({
  name: z.string().min(3).max(50),
  age: z.number({invalid_type_error: 'Age field is required'}).min(18, {message: "Age must be at least 18"}).max(150) // custom message 
});

const Form = () => {
  // we destructure formState object and extracts only errors property
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm({resolver: zodResolver(schema)});

  const onSubmit = (data) => {
    console.log(data);
  };

  return (
    <>
      <form onSubmit={handleSubmit(onSubmit)}>
        <div className="mb-3">
          <label htmlFor="name" className="form-label">
            Name
          </label>
          <input
            {...register("name")}
            id="name"
            type="text"
            className="form-control"
          />
          {errors.name && <p className="text-danger">{errors.name.message}</p>}                 
        </div>

        <div className="mb-3">
          <label htmlFor="age" className="form-label">
            Age
          </label>
          <input
            {...register("age", {valueAsNumber: true})}
            id="age"
            type="number"
            className="form-control"
          />
          {errors.age && <p className="text-danger">{errors.age.message}</p>}         
        </div>

        <button type="submit" className="btn btn-primary">
          Submit
        </button>
      </form>
    </>
  );
};

export default Form;



























