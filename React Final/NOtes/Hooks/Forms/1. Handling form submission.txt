Adding Forms in React: 
----------------------

-> Just like in HTML, React uses forms to allow users to interact with the web page
-> By default When we submit an html form that form is posted to server so we ge full page reload.
-> to solve this problem we have to prevent this default behavior and let React control the form.
-> In real world application quite often when submitting the form we need to call the server to save the data .


Handling Forms: 

-> Handling forms is about how you handle the data when it changes value or gets submitted.
-> In HTML, form data is usually handled by the DOM.
-> In React, form data is usually handled by the components.
-> When the data is handled by the components, all the data is stored in the component state.
-> You can control changes by adding event handlers in the onChange, onSubmit attribute
-> We can use the useState Hook to keep track of each inputs value and provide a "single source of truth" for the entire application







Code : 
------

ex.1 : without table

const Form = () => {

  const submitForm = (event) => {
    event.preventDefault();
    console.log('Submitted.');
  }
  return (
    <>
      <form onSubmit={submitForm}>
        <div className="mb-3">
          <label htmlFor="name" className="form-label">
            Name
          </label>
          <input id="name" type="text" className="form-control" />
        </div>

        <div className="mb-3">
          <label htmlFor="age" className="form-label">
            Age
          </label>
          <input id="age" type="number" className="form-control" />
        </div>

        <button type="submit" className="btn btn-primary">Submit</button>
      </form>
    </>
  );
};









event.preventDefault(): 

-> In React, event.preventDefault() is used to prevent the default behavior of an event from occurring. 
It is commonly used in forms, links, and other event-driven elements. 
Hereâ€™s why you might use it:

1. Prevent Form Submission

In a form with a submit button, the default behavior is to reload the page. 
Using event.preventDefault(), we can prevent this and handle the submission via JavaScript.

code:
function handleSubmit(event) {
  event.preventDefault(); // Prevents page reload
  console.log("Form submitted!");
}

return (
  <form onSubmit={handleSubmit}>
    <button type="submit">Submit</button>
  </form>
);




2. Prevent Link Navigation
When clicking on an <a> tag, the browser navigates to the href. 
If you want to prevent this (e.g., for custom navigation in a Single Page Application), use preventDefault().

code:
function handleClick(event) {
  event.preventDefault();
  console.log("Link clicked but not navigated!");
}

return <a href="https://example.com" onClick={handleClick}>Click Me</a>;



3. 3. Prevent Default Drag and Drop Behavior
By default, dropping an element on a webpage may open it. Preventing this allows custom drag-and-drop behavior

code: 
function handleDragOver(event) {
  event.preventDefault();
}

return <div onDragOver={handleDragOver}>Drop Here</div>;
