
useState() = Re-renders the component when the state value changes.

useRef() = "use Reference" Does not cause re-renders when its value changes.
           When you want a component to "remember" some information, 
           but you donâ€™t want that information to trigger new renders.

           1. Accessing/Interacting with DOM elements
           2. Handling Focus, Animations, and Transitions
           3. Managing Timers and Intervals

-> useRef returns a "ref object" with a single "current property" initially set to the "initial value" 
provided by you.


-> The useRef Hook allows you to persist values between renders.
-> It is used to store a mutable value that does not cause a re-render when updated.
-> It can be used to access a DOM element directly.
-> useRef() only returns one item. It returns an Object which has single property called current.
-> Ex. 
	const count = useRef(0);
It's like doing this: const count = {current: 0}. We can access the count by using count.current.



The useRef hook in React is primarily used for two main purposes:
=================================================================


1.Accessing and interacting with the DOM:
=========================================

-> In general, we want to let React handle all DOM manipulation
-> But there are some instances where useRef can be used without causing issues.
-> In React, we can add a 'ref attribute' to an React element to access it directly in the DOM.
-> we can add a ref attribute and attach it to a React element, and then you can access and modify properties of the DOM element 
directly.


code 1:
import React, { useRef } from "react";
const Login = () => {
  const nameRef = useRef(null);
  const submitHandler = (event) => {
    event.preventDefault();
    console.log(nameRef.current.value); // accessing dom elements. "nameRef.current" will return you element and "nameRef.current.value" return you value of input field.
    console.log('Form Submitted.');
  }
  return (
    <form onSubmit={submitHandler}>
      <div className="mb-3">
        <label htmlFor="name" className="form-label">Name</label>
        <input ref={nameRef} id="name" type="text" className="form-control"/>
      </div>

      <button type="submit" className="btn btn-primary">Submit</button>
    </form>
  );
};



2. Persisting values between renders without causing re-renders:
================================================================

-> Another important use case of useRef is to persist values across renders without triggering a re-render. 
-> It can be used to store a mutable value that does not cause a re-render when updated.
-> If you use local variable like "let count = 0" to store a value then after every render its value get 
 re-initialized to 0 so you lost your previous data, to solcve this we use useRef hook.
 

without useRef jook;
--------------------

function App() {
  let renderCount = 0;
  const [someState, setSomeState] = useState(false);

  useEffect(() => {
    renderCount += 1; 
  });

  const toggleState = () => {
    setSomeState(prevState => !prevState);
  };

  return (
    <div>
      <p>This component has rendered {renderCount} times.</p>
      <button onClick={toggleState}>Toggle State</button>
    </div>
  );
}



with useRef hook: 
-----------------



function App() {
  let renderCount = useRef(0);
  const [someState, setSomeState] = useState(false);

  useEffect(() => {
    renderCount.current += 1; 
  });

  const toggleState = () => {
    setSomeState(prevState => !prevState);
  };

  return (
    <div>
      <p>This component has rendered {renderCount.current} times.</p>
      <button onClick={toggleState}>Toggle State</button>
    </div>
  );
}




































